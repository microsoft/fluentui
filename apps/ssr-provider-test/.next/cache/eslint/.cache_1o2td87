[{"/home/estebanmu-dev/fluentui/apps/ssr-provider-test/pages/_app.tsx":"1","/home/estebanmu-dev/fluentui/apps/ssr-provider-test/pages/_document.tsx":"2","/home/estebanmu-dev/fluentui/apps/ssr-provider-test/pages/index.tsx":"3"},{"size":773,"mtime":1671153754346,"results":"4","hashOfConfig":"5"},{"size":1330,"mtime":1671153756606,"results":"6","hashOfConfig":"5"},{"size":823,"mtime":1671153930416,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1tx5h26",{"filePath":"11","messages":"12","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"/home/estebanmu-dev/fluentui/apps/ssr-provider-test/pages/_app.tsx",["17"],"import {\n  createDOMRenderer,\n  FluentProvider,\n  GriffelRenderer,\n  SSRProvider,\n  RendererProvider,\n  webLightTheme,\n} from '@fluentui/react-components';\nimport type { AppProps } from 'next/app';\nimport * as React from 'react';\n\ntype EnhancedAppProps = AppProps & { renderer?: GriffelRenderer };\n\nfunction MyApp({ Component, pageProps, renderer }: EnhancedAppProps) {\n  return (\n    // ðŸ‘‡ Accepts a renderer from <Document /> or creates a default one\n    //    Also triggers rehydration a client\n    <RendererProvider renderer={renderer || createDOMRenderer()}>\n      <SSRProvider>\n        <FluentProvider theme={webLightTheme}>\n          <Component {...pageProps} />\n        </FluentProvider>\n      </SSRProvider>\n    </RendererProvider>\n  );\n}\n\nexport default MyApp;\n","/home/estebanmu-dev/fluentui/apps/ssr-provider-test/pages/_document.tsx",["18"],"import * as React from 'react';\nimport { createDOMRenderer, renderToStyleElements } from '@fluentui/react-components';\nimport Document, { Html, Head, Main, NextScript, DocumentContext } from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx: DocumentContext) {\n    // ðŸ‘‡ creates a renderer that will be used for SSR\n    const renderer = createDOMRenderer();\n    const originalRenderPage = ctx.renderPage;\n\n    ctx.renderPage = () =>\n      originalRenderPage({\n        enhanceApp: App =>\n          function EnhancedApp(props) {\n            const enhancedProps = {\n              ...props,\n              // ðŸ‘‡ this is required to provide a proper renderer instance\n              renderer,\n            };\n\n            return <App {...enhancedProps} />;\n          },\n      });\n\n    const initialProps = await Document.getInitialProps(ctx);\n    const styles = renderToStyleElements(renderer);\n\n    return {\n      ...initialProps,\n      styles: (\n        <>\n          {initialProps.styles}\n          {/* ðŸ‘‡ adding Fluent UI styles elements to output */}\n          {styles}\n        </>\n      ),\n    };\n  }\n\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n","/home/estebanmu-dev/fluentui/apps/ssr-provider-test/pages/index.tsx",["19"],"import * as React from 'react';\nimport { Button, makeStyles, shorthands, Title1, tokens } from '@fluentui/react-components';\nimport Head from 'next/head';\nimport type { NextPage } from 'next';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '200px',\n\n    ...shorthands.border('2px', 'dashed', tokens.colorPaletteBerryBorder2),\n    ...shorthands.borderRadius(tokens.borderRadiusMedium),\n    ...shorthands.gap('5px'),\n    ...shorthands.padding('10px'),\n  },\n});\n\nconst Home: NextPage = () => {\n  const styles = useStyles();\n\n  return (\n    <>\n      <Head>\n        <title>My app</title>\n      </Head>\n\n      <div className={styles.container}>\n        <Title1>Hello world!</Title1>\n        <Button>A button</Button>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n",{"ruleId":null,"fatal":true,"severity":2,"message":"20"},{"ruleId":null,"fatal":true,"severity":2,"message":"21"},{"ruleId":null,"fatal":true,"severity":2,"message":"22"},"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: pages/_app.tsx.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: pages/_document.tsx.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: pages/index.tsx.\nThe file must be included in at least one of the projects provided."]