export type FluentOverrideValue =
  | {
      f2Token: string;
      rawValue?: never;
    }
  | {
      f2Token?: never;
      rawValue: string;
    };

export type FluentOverrides = Record<string, FluentOverrideValue | null>;

export const fluentOverrides: FluentOverrides = {
  backgroundCtrlActiveBrandDisabled: { f2Token: 'colorNeutralBackgroundDisabled' },
  backgroundCtrlActiveBrandHover: { f2Token: 'colorCompoundBrandBackgroundHover' },
  backgroundCtrlActiveBrandPressed: { f2Token: 'colorCompoundBrandBackgroundPressed' },
  backgroundCtrlActiveBrandRest: { f2Token: 'colorCompoundBrandBackground' },
  backgroundCtrlBrandHover: { f2Token: 'colorBrandBackgroundHover' },
  backgroundCtrlBrandPressed: { f2Token: 'colorBrandBackgroundPressed' },
  backgroundCtrlBrandRest: { f2Token: 'colorBrandBackground' },
  backgroundCtrlNeutralDisabled: { f2Token: 'colorNeutralBackgroundDisabled' },
  backgroundCtrlNeutralHover: { f2Token: 'colorNeutralBackground1Hover' },
  backgroundCtrlNeutralPressed: { f2Token: 'colorNeutralBackground1Pressed' },
  backgroundCtrlNeutralRest: { f2Token: 'colorNeutralBackground1' },
  backgroundCtrlOutlineHover: { f2Token: 'colorTransparentBackgroundHover' },
  backgroundCtrlOutlinePressed: { f2Token: 'colorTransparentBackgroundPressed' },
  backgroundCtrlOutlineRest: { f2Token: 'colorTransparentBackground' },
  backgroundCtrlShapeSafeNeutralDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  backgroundCtrlShapeSafeNeutralHover: { f2Token: 'colorNeutralStrokeAccessibleHover' },
  backgroundCtrlShapeSafeNeutralPressed: { f2Token: 'colorNeutralStrokeAccessiblePressed' },
  backgroundCtrlShapeSafeNeutralRest: { f2Token: 'colorNeutralStrokeAccessible' },
  backgroundCtrlSubtleDisabled: { f2Token: 'colorTransparentBackground' },
  backgroundCtrlSubtleHover: { f2Token: 'colorSubtleBackgroundHover' },
  backgroundCtrlSubtlePressed: { f2Token: 'colorSubtleBackgroundPressed' },
  backgroundCtrlSubtleRest: { f2Token: 'colorSubtleBackground' },
  backgroundFlyoutSolid: { f2Token: 'colorNeutralBackground1' },
  backgroundSmoke: { f2Token: 'colorBackgroundOverlay' },
  cornerCircular: { f2Token: 'borderRadiusCircular' },
  cornerCtrlHover: { f2Token: 'borderRadiusMedium' },
  cornerCtrlLgRest: { f2Token: 'borderRadiusMedium' }, // Button uses borderRadiusMedium in all sizes
  cornerCtrlPressed: { f2Token: 'borderRadiusMedium' },
  cornerCtrlRest: { f2Token: 'borderRadiusMedium' },
  cornerCtrlSmRest: { f2Token: 'borderRadiusMedium' }, // Button uses borderRadiusMedium in all sizes
  cornerFlyoutRest: { rawValue: '0px' },
  cornerZero: { f2Token: 'borderRadiusNone' },
  ctrlAvatarActiveRingStrokeWidth: { f2Token: 'strokeWidthThick' },
  ctrlAvatarBackground: { f2Token: 'colorNeutralBackground6' },
  ctrlAvatarCornerGroup: { f2Token: 'borderRadiusMedium' },
  ctrlAvatarCornerItem: { f2Token: 'borderRadiusCircular' },
  ctrlAvatarForeground: { f2Token: 'colorNeutralForeground3' },
  ctrlAvatarPresenceBadgeBackgroundBehindBadge: { rawValue: 'white' },
  ctrlAvatarSize: { rawValue: '32px' },
  ctrlAvatarTextFontSize: { f2Token: 'fontSizeBase300' },
  ctrlAvatarTextLineHeight: { rawValue: '1' },
  ctrlBadgeCorner: { f2Token: 'borderRadiusMedium' },
  ctrlBadgeLgPadding: { f2Token: 'spacingHorizontalXS' },
  ctrlBadgePadding: { f2Token: 'spacingHorizontalXS' },
  ctrlBadgeSmPadding: { f2Token: 'spacingHorizontalXXS' },
  ctrlChoiceBaseBackgroundDisabled: { f2Token: 'colorTransparentBackground' },
  ctrlChoiceBaseBackgroundHover: { rawValue: 'unset' },
  ctrlChoiceBaseBackgroundPressed: { f2Token: 'colorNeutralStrokeAccessiblePressed' },
  ctrlChoiceBaseBackgroundRest: { f2Token: 'colorTransparentBackground' },
  ctrlChoiceBaseSize: { rawValue: '20px' },
  ctrlChoiceBaseStrokeDisabled: { f2Token: 'colorNeutralStrokeDisabled' },
  ctrlChoiceBaseStrokeHover: { f2Token: 'colorNeutralStrokeAccessibleHover' },
  ctrlChoiceBaseStrokePressed: { f2Token: 'colorNeutralStrokeAccessiblePressed' },
  ctrlChoiceBaseStrokeRest: { f2Token: 'colorNeutralStrokeAccessible' },
  ctrlChoiceCheckboxCorner: { f2Token: 'borderRadiusSmall' },
  ctrlChoicePaddingHorizontal: { f2Token: 'spacingHorizontalS' },
  ctrlChoicePaddingVertical: { f2Token: 'spacingVerticalS' },
  ctrlChoiceRadioCorner: { f2Token: 'borderRadiusCircular' },
  ctrlChoiceRadioDotSizeRest: { rawValue: '16px' },
  ctrlChoiceSwitchCorner: { f2Token: 'borderRadiusCircular' },
  ctrlChoiceSwitchHeight: { rawValue: '20px' },
  ctrlChoiceSwitchPaddingHover: { rawValue: '1px' },
  ctrlChoiceSwitchPaddingPressed: { rawValue: '1px' },
  ctrlChoiceSwitchPaddingRest: { rawValue: '1px' },
  ctrlChoiceSwitchThumbWidthHover: { rawValue: '18px' },
  ctrlChoiceSwitchThumbWidthPressed: { rawValue: '18px' },
  ctrlChoiceSwitchThumbWidthRest: { rawValue: '18px' },
  ctrlChoiceSwitchWidth: { rawValue: '40px' },
  ctrlDialogBaseCorner: { f2Token: 'borderRadiusXLarge' },
  ctrlDialogBaseShadow: { f2Token: 'shadow64' },
  ctrlDialogLayerBackground: { f2Token: 'colorNeutralBackground1' },
  ctrlDialogStroke: { f2Token: 'colorNeutralStroke2' },
  ctrlDividerFixedLineLength: { rawValue: '8px' },
  ctrlFocusInnerStroke: { f2Token: 'colorStrokeFocus2' },
  ctrlFocusInnerStrokeWidth: { f2Token: 'strokeWidthThin' },
  ctrlFocusOuterStroke: { f2Token: 'colorTransparentStroke' },
  ctrlFocusOuterStrokeWidth: { f2Token: 'strokeWidthThick' },
  ctrlInputBackgroundDisabled: { f2Token: 'colorNeutralBackgroundDisabled' },
  ctrlInputBackgroundError: { f2Token: 'colorPaletteRedBorder2' },
  ctrlInputBackgroundRest: { f2Token: 'colorNeutralBackground1' },
  ctrlInputBackgroundSelected: { f2Token: 'colorNeutralBackground1' },
  ctrlInputBottomLineStrokeHover: { f2Token: 'colorNeutralStrokeAccessibleHover' },
  ctrlInputBottomLineStrokePressed: { f2Token: 'colorNeutralStrokeAccessiblePressed' },
  ctrlInputBottomLineStrokeRest: { f2Token: 'colorNeutralStrokeAccessible' },
  ctrlInputBottomLineStrokeSelected: { f2Token: 'colorCompoundBrandStroke' },
  ctrlInputBottomLineStrokeWidthRest: { f2Token: 'strokeWidthThin' },
  ctrlInputBottomLineStrokeWidthSelected: { f2Token: 'strokeWidthThick' },
  ctrlInputStrokeDisabled: { f2Token: 'colorNeutralStrokeDisabled' },
  ctrlInputStrokeHover: { f2Token: 'colorNeutralStroke1Hover' },
  ctrlInputStrokePressed: { f2Token: 'colorNeutralStroke1Pressed' },
  ctrlInputStrokeRest: { f2Token: 'colorNeutralStroke1' },
  ctrlInputStrokeSelected: { f2Token: 'colorNeutralStroke1' },
  ctrlInputStrokeWidthRest: { f2Token: 'strokeWidthThin' },
  ctrlLinkForegroundBrandHover: { f2Token: 'colorBrandForegroundLinkHover' },
  ctrlLinkForegroundBrandPressed: { f2Token: 'colorBrandForegroundLinkPressed' },
  ctrlLinkForegroundBrandRest: { f2Token: 'colorBrandForegroundLink' },
  ctrlLinkForegroundNeutralHover: { f2Token: 'colorNeutralForeground2Hover' },
  ctrlLinkForegroundNeutralPressed: { f2Token: 'colorNeutralForeground2Pressed' },
  ctrlLinkForegroundNeutralRest: { f2Token: 'colorNeutralForeground2' },
  ctrlListCornerHover: { f2Token: 'borderRadiusMedium' },
  ctrlListCornerRest: { f2Token: 'borderRadiusMedium' },
  ctrlListIndentLevel1: { f2Token: 'spacingHorizontalXXL' },
  ctrlListPillWidth: { f2Token: 'strokeWidthThicker' },
  ctrlProgressBackgroundEmpty: { f2Token: 'colorNeutralBackground6' },
  ctrlProgressBackgroundFilled: { f2Token: 'colorCompoundBrandBackground' },
  ctrlProgressCorner: { f2Token: 'borderRadiusMedium' },
  ctrlProgressHeightEmpty: { rawValue: '2px' },
  ctrlProgressHeightFilled: { rawValue: '100%' },
  ctrlProgressLgHeightEmpty: { rawValue: '4px' },
  ctrlProgressLgHeightFilled: { rawValue: '100%' },
  ctrlRatingIconForegroundEmpty: { f2Token: 'colorNeutralBackground6' }, // should be #D9DDE3 per design
  ctrlRatingIconForegroundFilled: { f2Token: 'colorNeutralForeground1' }, // should be #24282F per design
  ctrlSliderBarCorner: { f2Token: 'borderRadiusXLarge' },
  ctrlSliderBarForegroundEmptyDisabled: { f2Token: 'colorNeutralBackgroundDisabled' },
  ctrlSliderBarForegroundEmptyHover: { f2Token: 'colorNeutralStrokeAccessible' },
  ctrlSliderBarForegroundEmptyPressed: { f2Token: 'colorNeutralStrokeAccessible' },
  ctrlSliderBarForegroundEmptyRest: { f2Token: 'colorNeutralStrokeAccessible' },
  ctrlSliderBarForegroundFilledDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  ctrlSliderBarForegroundFilledHover: { f2Token: 'colorCompoundBrandBackgroundHover' },
  ctrlSliderBarForegroundFilledPressed: { f2Token: 'colorCompoundBrandBackgroundPressed' },
  ctrlSliderBarForegroundFilledRest: { f2Token: 'colorCompoundBrandBackground' },
  ctrlSliderBarHeight: { rawValue: '4px' },
  ctrlSliderSmBarHeight: { rawValue: '2px' },
  ctrlSliderSmThumbSizeHover: { rawValue: '16px' },
  ctrlSliderSmThumbSizePressed: { rawValue: '16px' },
  ctrlSliderSmThumbSizeRest: { rawValue: '16px' },
  ctrlSliderThumbBackgroundDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  ctrlSliderThumbBackgroundHover: { f2Token: 'colorCompoundBrandBackgroundHover' },
  ctrlSliderThumbBackgroundPressed: { f2Token: 'colorCompoundBrandBackgroundPressed' },
  ctrlSliderThumbBackgroundRest: { f2Token: 'colorCompoundBrandBackground' },
  ctrlSliderThumbCorner: { f2Token: 'borderRadiusCircular' },
  ctrlSliderThumbInnerStrokeDisabled: { f2Token: 'colorNeutralBackground1' },
  ctrlSliderThumbInnerStrokeHover: { f2Token: 'colorNeutralBackground1' },
  ctrlSliderThumbInnerStrokePressed: { f2Token: 'colorNeutralBackground1' },
  ctrlSliderThumbInnerStrokeRest: { f2Token: 'colorNeutralBackground1' },
  ctrlSliderThumbOuterStrokeDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  ctrlSliderThumbOuterStrokeHover: { f2Token: 'colorNeutralStroke1' },
  ctrlSliderThumbOuterStrokePressed: { f2Token: 'colorNeutralStroke1' },
  ctrlSliderThumbOuterStrokeRest: { f2Token: 'colorNeutralStroke1' },
  ctrlSliderThumbSizeHover: { rawValue: '20px' },
  ctrlSliderThumbSizePressed: { rawValue: '20px' },
  ctrlSliderThumbSizeRest: { rawValue: '20px' },
  ctrlSpinnerStrokeWidth: { f2Token: 'strokeWidthThicker' },
  ctrlTooltipBackground: {
    f2Token: 'colorNeutralBackground1',
  },
  ctrlTooltipCorner: {
    f2Token: 'borderRadiusMedium',
  },
  ctrlTooltipForeground: {
    f2Token: 'colorNeutralForeground1',
  },
  ctrlTooltipShadow: {
    rawValue:
      `drop-shadow(0 0 2px var(--colorNeutralShadowAmbient)) ` + `drop-shadow(0 4px 8px var(--colorNeutralShadowKey))`,
  },
  foregroundContentBrandPrimary: { f2Token: 'colorBrandForeground1' },
  foregroundContentNeutralPrimary: { f2Token: 'colorNeutralForeground1' },
  foregroundContentNeutralSecondary: { f2Token: 'colorNeutralForeground2' },
  foregroundCtrlActiveBrandHover: { f2Token: 'colorCompoundBrandForeground1Hover' },
  foregroundCtrlActiveBrandPressed: { f2Token: 'colorCompoundBrandForeground1Pressed' },
  foregroundCtrlActiveBrandRest: { f2Token: 'colorCompoundBrandForeground1' },
  foregroundCtrlIconOnNeutralDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  foregroundCtrlIconOnNeutralRest: { f2Token: 'colorNeutralForeground3' },
  foregroundCtrlIconOnSubtleDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  foregroundCtrlIconOnSubtleHover: { f2Token: 'colorNeutralForeground2BrandHover' },
  foregroundCtrlIconOnSubtlePressed: { f2Token: 'colorNeutralForeground2BrandPressed' },
  foregroundCtrlIconOnSubtleRest: { f2Token: 'colorNeutralForeground2' },
  foregroundCtrlNeutralPrimaryDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  foregroundCtrlNeutralPrimaryHover: { f2Token: 'colorNeutralForeground1Hover' },
  foregroundCtrlNeutralPrimaryPressed: { f2Token: 'colorNeutralForeground1Pressed' },
  foregroundCtrlNeutralPrimaryRest: { f2Token: 'colorNeutralForeground1' },
  foregroundCtrlNeutralSecondaryDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  foregroundCtrlNeutralSecondaryHover: { f2Token: 'colorNeutralForeground2Hover' },
  foregroundCtrlNeutralSecondaryPressed: { f2Token: 'colorNeutralForeground2Pressed' },
  foregroundCtrlNeutralSecondaryRest: { f2Token: 'colorNeutralForeground2' },
  foregroundCtrlOnActiveBrandDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  foregroundCtrlOnActiveBrandHover: { f2Token: 'colorNeutralForegroundInvertedHover' },
  foregroundCtrlOnActiveBrandPressed: { f2Token: 'colorNeutralForegroundInvertedPressed' },
  foregroundCtrlOnActiveBrandRest: { f2Token: 'colorNeutralForegroundInverted' },
  foregroundCtrlOnBrandHover: { f2Token: 'colorNeutralForegroundOnBrand' },
  foregroundCtrlOnBrandPressed: { f2Token: 'colorNeutralForegroundOnBrand' },
  foregroundCtrlOnBrandRest: { f2Token: 'colorNeutralForegroundOnBrand' },
  foregroundCtrlOnOutlineDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  foregroundCtrlOnOutlineHover: { f2Token: 'colorNeutralForeground1Hover' },
  foregroundCtrlOnOutlinePressed: { f2Token: 'colorNeutralForeground1Pressed' },
  foregroundCtrlOnOutlineRest: { f2Token: 'colorNeutralForeground1' },
  foregroundCtrlOnSubtleDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  foregroundCtrlOnSubtleHover: { f2Token: 'colorNeutralForeground2Hover' },
  foregroundCtrlOnSubtlePressed: { f2Token: 'colorNeutralForeground2Pressed' },
  foregroundCtrlOnSubtleRest: { f2Token: 'colorNeutralForeground2' },
  foregroundCtrlOnTransparentDisabled: { f2Token: 'colorNeutralForegroundDisabled' },
  foregroundCtrlOnTransparentHover: { f2Token: 'colorNeutralForeground2BrandHover' },
  foregroundCtrlOnTransparentPressed: { f2Token: 'colorNeutralForeground2BrandPressed' },
  foregroundCtrlOnTransparentRest: { f2Token: 'colorNeutralForeground2' },
  gapBetweenContentSmall: { rawValue: '8px' },
  gapBetweenContentXSmall: { f2Token: 'spacingVerticalXXS' },
  gapBetweenCtrlDefault: { rawValue: '8px' },
  gapBetweenListItem: { f2Token: 'spacingVerticalXXS' },
  gapBetweenTextSmall: { f2Token: 'spacingHorizontalXS' },
  gapInsideCtrlDefault: { f2Token: 'spacingHorizontalS' },
  gapInsideCtrlLgDefault: { f2Token: 'spacingHorizontalSNudge' },
  gapInsideCtrlLgToLabel: { f2Token: 'spacingHorizontalS' },
  gapInsideCtrlSmDefault: { f2Token: 'spacingHorizontalXS' },
  gapInsideCtrlSmToLabel: { f2Token: 'spacingHorizontalXS' }, // Rating uses 8px, or spacingHorizontalS, for all gaps between icons and label in design
  gapInsideCtrlToLabel: { f2Token: 'spacingHorizontalSNudge' }, // Rating uses 8px, or spacingHorizontalS, for all gaps between icons and label in design
  materialAcrylicDefaultSolid: { f2Token: 'colorNeutralBackground1' },
  nullColor: { f2Token: 'colorTransparentBackground' },
  paddingContentAlignDefault: { f2Token: 'spacingVerticalS' },
  paddingContentAlignOutdentIconOnSubtle: { f2Token: 'spacingHorizontalM' },
  paddingContentLarge: { f2Token: 'spacingHorizontalXXL' },
  paddingContentNone: { f2Token: 'spacingHorizontalNone' },
  paddingCtrlHorizontalDefault: { f2Token: 'spacingHorizontalM' },
  paddingCtrlHorizontalIconOnly: { rawValue: '5px' },
  paddingCtrlLgHorizontalDefault: { f2Token: 'spacingHorizontalL' },
  paddingCtrlLgHorizontalIconOnly: { rawValue: '7px' },
  paddingCtrlLgTextBottom: null, // Enable for semantic, but legacy should fallback to undefined
  paddingCtrlLgTextTop: null, // Enable for semantic, but legacy should fallback to undefined
  paddingCtrlSmHorizontalDefault: { f2Token: 'spacingHorizontalS' },
  paddingCtrlSmHorizontalIconOnly: { rawValue: '1px' },
  paddingCtrlSmTextBottom: null, // Enable for semantic, but legacy should fallback to undefined
  paddingCtrlSmTextTop: null, // Enable for semantic, but legacy should fallback to undefined
  paddingCtrlTextBottom: { rawValue: '5px' },
  paddingCtrlTextSide: { rawValue: '0px' }, // Enable for semantic, but legacy should fallback to 0px
  paddingCtrlTextTop: { rawValue: '5px' },
  paddingFlyoutDefault: { rawValue: '4px' },
  shadowFlyout: { f2Token: 'shadow64' },
  sizeCtrlDefault: { rawValue: '44px' },
  sizeCtrlIcon: { rawValue: '20px' },
  sizeCtrlIconSecondary: { rawValue: '20px' },
  sizeCtrlLgDefault: { rawValue: '44px' },
  sizeCtrlLgIcon: { rawValue: '24px' },
  sizeCtrlSmDefault: { rawValue: '32px' },
  sizeCtrlSmIcon: { rawValue: '20px' },
  statusAwayForeground: { f2Token: 'colorPaletteMarigoldBackground3' },
  statusBrandBackground: { f2Token: 'colorBrandBackground' },
  statusBrandForeground: { f2Token: 'colorNeutralForegroundOnBrand' },
  statusBrandTintBackground: { f2Token: 'colorBrandBackground2' },
  statusBrandTintForeground: { f2Token: 'colorBrandForeground1' },
  statusBrandTintStroke: { f2Token: 'colorBrandStroke2' },
  statusDangerBackground: { f2Token: 'colorPaletteRedBackground3' },
  statusDangerForeground: { f2Token: 'colorNeutralForegroundOnBrand' },
  statusDangerStroke: { f2Token: 'colorPaletteRedBorder2' },
  statusDangerTintBackground: { f2Token: 'colorStatusDangerBackground1' },
  statusDangerTintForeground: { f2Token: 'colorPaletteRedForeground3' },
  statusDangerTintStroke: { f2Token: 'colorStatusDangerBorder1' },
  statusImportantBackground: { f2Token: 'colorNeutralForeground1' },
  statusImportantForeground: { f2Token: 'colorNeutralBackground1' },
  statusImportantStroke: { f2Token: 'colorNeutralStrokeAccessible' },
  statusImportantTintBackground: { f2Token: 'colorNeutralBackground3' },
  statusImportantTintForeground: { f2Token: 'colorNeutralForeground1' },
  statusImportantTintStroke: { f2Token: 'colorTransparentStroke' },
  statusInformativeBackground: { f2Token: 'colorNeutralBackground5' },
  statusInformativeForeground: { f2Token: 'colorNeutralForeground3' },
  statusInformativeStroke: { f2Token: 'colorNeutralStroke2' },
  statusInformativeTintBackground: { f2Token: 'colorNeutralBackground4' },
  statusInformativeTintForeground: { f2Token: 'colorNeutralForeground3' },
  statusInformativeTintStroke: { f2Token: 'colorNeutralStroke1' },
  statusOofForeground: { f2Token: 'colorPaletteBerryForeground3' },
  statusSuccessBackground: { f2Token: 'colorPaletteGreenBackground3' },
  statusSuccessForeground: { f2Token: 'colorNeutralForegroundOnBrand' },
  statusSuccessStroke: { f2Token: 'colorPaletteGreenBorder2' },
  statusSuccessTintBackground: { f2Token: 'colorStatusSuccessBackground1' },
  statusSuccessTintForeground: { f2Token: 'colorStatusSuccessForeground1' },
  statusSuccessTintStroke: { f2Token: 'colorStatusSuccessBorder1' },
  statusWarningBackground: { f2Token: 'colorPaletteDarkOrangeBackground3' },
  statusWarningForeground: { f2Token: 'colorNeutralForeground1Static' },
  statusWarningTintBackground: { f2Token: 'colorStatusWarningBackground1' },
  statusWarningTintForeground: { f2Token: 'colorStatusWarningForeground3' },
  statusWarningTintStroke: { f2Token: 'colorStatusWarningBorder1' },
  strokeCtrlDividerOnBrand: { f2Token: 'colorNeutralStrokeOnBrand' },
  strokeCtrlDividerOnOutline: { f2Token: 'colorNeutralStroke1' },
  strokeCtrlDividerOnSubtle: { rawValue: 'transparent' },
  strokeCtrlOnActiveBrandDisabled: { f2Token: 'colorTransparentStrokeDisabled' },
  strokeCtrlOnActiveBrandHover: { f2Token: 'colorStrokeFocus2' },
  strokeCtrlOnActiveBrandPressed: { f2Token: 'colorTransparentStrokeInteractive' },
  strokeCtrlOnActiveBrandRest: { f2Token: 'colorNeutralForegroundOnBrand' },
  strokeCtrlOnBrandDisabled: { rawValue: 'transparent' },
  strokeCtrlOnBrandHover: { rawValue: 'transparent' },
  strokeCtrlOnBrandPressed: { rawValue: 'transparent' },
  strokeCtrlOnBrandRest: { rawValue: 'transparent' },
  strokeCtrlOnNeutralDisabled: { f2Token: 'colorNeutralStrokeDisabled' },
  strokeCtrlOnNeutralHover: { f2Token: 'colorNeutralStroke1Hover' },
  strokeCtrlOnNeutralPressed: { f2Token: 'colorNeutralStroke1Pressed' },
  strokeCtrlOnNeutralRest: { f2Token: 'colorNeutralStroke1' },
  strokeCtrlOnOutlineDisabled: { f2Token: 'colorNeutralStrokeDisabled' },
  strokeCtrlOnOutlineHover: { f2Token: 'colorNeutralStroke1' },
  strokeCtrlOnOutlinePressed: { f2Token: 'colorNeutralStroke1' },
  strokeCtrlOnOutlineRest: { f2Token: 'colorNeutralStroke1' },
  strokeCtrlOnSubtleDisabled: { rawValue: 'transparent' },
  strokeCtrlOnSubtleHover: { rawValue: 'transparent' },
  strokeCtrlOnSubtlePressed: { rawValue: 'transparent' },
  strokeCtrlOnSubtleRest: { rawValue: 'transparent' },
  strokeDividerBrand: { f2Token: 'colorBrandStroke1' },
  strokeDividerDefault: { f2Token: 'colorNeutralStroke2' },
  strokeDividerStrong: { f2Token: 'colorNeutralStroke1' },
  strokeDividerSubtle: { f2Token: 'colorNeutralStroke3' },
  strokeFlyout: { f2Token: 'colorNeutralBackground3' },
  strokeLayer: { f2Token: 'colorTransparentStroke' },
  strokeWidthCtrlOutlineHover: { f2Token: 'strokeWidthThin' },
  strokeWidthCtrlOutlinePressed: { f2Token: 'strokeWidthThin' },
  strokeWidthCtrlOutlineRest: { f2Token: 'strokeWidthThin' },
  strokeWidthCtrlOutlineSelected: { f2Token: 'strokeWidthThicker' },
  strokeWidthDefault: { f2Token: 'strokeWidthThin' },
  strokeWidthDividerDefault: { f2Token: 'strokeWidthThin' },
  textCtrlButtonWeightDefault: { f2Token: 'fontWeightSemibold' },
  textCtrlWeightSelected: { f2Token: 'fontWeightSemibold' },
  textGlobalBody1FontSize: { f2Token: 'fontSizeBase500' },
  textGlobalBody1LineHeight: { f2Token: 'lineHeightBase500' },
  textGlobalBody2FontSize: { f2Token: 'fontSizeBase400' },
  textGlobalBody2LineHeight: { f2Token: 'lineHeightBase400' },
  textGlobalBody3FontSize: { f2Token: 'fontSizeBase300' },
  textGlobalBody3LineHeight: { f2Token: 'lineHeightBase300' },
  textGlobalCaption1FontSize: { f2Token: 'fontSizeBase200' },
  textGlobalCaption1LineHeight: { f2Token: 'lineHeightBase200' },
  textGlobalCaption2FontSize: { f2Token: 'fontSizeBase100' },
  textGlobalCaption2LineHeight: { f2Token: 'lineHeightBase100' },
  textGlobalDisplay2FontSize: { f2Token: 'fontSizeHero1000' },
  textGlobalDisplay2LineHeight: { f2Token: 'lineHeightHero1000' },
  textGlobalSubtitle1FontSize: { f2Token: 'fontSizeHero700' },
  textGlobalSubtitle1LineHeight: { f2Token: 'lineHeightHero700' },
  textGlobalSubtitle2FontSize: { f2Token: 'fontSizeBase600' },
  textGlobalSubtitle2LineHeight: { f2Token: 'lineHeightBase600' },
  textGlobalTitle1FontSize: { f2Token: 'fontSizeHero900' },
  textGlobalTitle1LineHeight: { f2Token: 'lineHeightHero900' },
  textGlobalTitle2FontSize: { f2Token: 'fontSizeHero800' },
  textGlobalTitle2LineHeight: { f2Token: 'lineHeightHero800' },
  textRampItemBodyFontSize: { f2Token: 'fontSizeBase300' },
  textRampItemBodyLineHeight: { f2Token: 'lineHeightBase300' },
  textRampItemHeaderFontSize: { f2Token: 'fontSizeBase300' },
  textRampItemHeaderLineHeight: { f2Token: 'lineHeightBase400' },
  textRampLegalFontSize: { f2Token: 'fontSizeBase200' },
  textRampLegalLineHeight: { f2Token: 'lineHeightBase200' },
  textRampLgItemBodyFontSize: { f2Token: 'fontSizeBase400' },
  textRampLgItemBodyLineHeight: { f2Token: 'lineHeightBase400' },
  textRampLgLegalFontSize: { f2Token: 'fontSizeBase200' }, // React-badge uses the same as medium font size for large
  textRampLgLegalLineHeight: { f2Token: 'lineHeightBase200' }, // React-badge uses the same as medium line height for large
  textRampMetadataFontSize: { f2Token: 'fontSizeBase200' }, // should be fontSizeBase100 per Menu design
  textRampMetadataLineHeight: { f2Token: 'lineHeightBase200' },
  textRampReadingBodyFontSize: { f2Token: 'fontSizeBase300' },
  textRampReadingBodyLineHeight: { f2Token: 'lineHeightBase300' },
  textRampSectionHeaderFontSize: { f2Token: 'fontSizeBase500' },
  textRampSectionHeaderLineHeight: { f2Token: 'lineHeightBase500' },
  textRampSmItemBodyFontSize: { f2Token: 'fontSizeBase200' },
  textRampSmItemBodyLineHeight: { f2Token: 'lineHeightBase200' },
  textRampSmLegalFontSize: { f2Token: 'fontSizeBase100' },
  textRampSmLegalLineHeight: { f2Token: 'lineHeightBase100' },
  textStyleDefaultHeaderFontFamily: { f2Token: 'fontFamilyBase' },
  textStyleDefaultHeaderWeight: { f2Token: 'fontWeightSemibold' },
  textStyleDefaultRegularFontFamily: { f2Token: 'fontFamilyBase' },
  textStyleDefaultRegularLetterSpacing: { rawValue: '0' },
  textStyleDefaultRegularWeight: { f2Token: 'fontWeightRegular' },
};
