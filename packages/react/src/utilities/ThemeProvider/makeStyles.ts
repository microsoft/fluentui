import { useTheme } from './useTheme';
import { getId } from '@fluentui/utilities';
import { useWindow } from '@fluentui/react-window-provider';
import { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';
import type { IStyle } from '@fluentui/style-utilities';
import type { Theme } from '@fluentui/theme';

const graphGet = (graphNode: Map<any, any>, path: any[]): any | undefined => {
  for (const key of path) {
    graphNode = graphNode.get(key);

    if (!graphNode) {
      return;
    }
  }

  return graphNode;
};

const graphSet = (graphNode: Map<any, any>, path: any[], value: any) => {
  for (let i = 0; i < path.length - 1; i++) {
    const key = path[i];

    let current = graphNode.get(key);

    if (!current) {
      current = new Map();

      graphNode.set(key, current);
    }

    graphNode = current;
  }

  graphNode.set(path[path.length - 1], value);
};

/**
 * Options that can be provided to the hook generated by `makeStyles`.
 * @deprecated Only used in deprecated `makeStyles` implementation below.
 */
export type UseStylesOptions = {
  theme?: Theme;
};

type WindowWithId = Window & {
  __id__: string;
};

/**
 * Registers a css object, optionally as a function of the theme.
 *
 * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`
 * and returns a css javascript object.
 *
 * @deprecated Use `mergeStyles` instead for v8 related code. We will be using a new implementation of `makeStyles` in
 * future versions of the library.
 */
export function makeStyles<TStyleSet extends { [key in keyof TStyleSet]: IStyle } = { [key: string]: IStyle }>(
  styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet),
  // eslint-disable-next-line deprecation/deprecation
): (options?: UseStylesOptions) => { [key in keyof TStyleSet]: string } {
  // Create graph of inputs to map to output.
  const graph = new Map();
  // Retain a dictionary of window ids we're tracking
  const allWindows = new Set<string>();

  // cleanupMapEntries will
  // 1. remove all the graph branches for the window,
  // 2. remove the event listener,
  // 3. delete the allWindows entry.
  const cleanupMapEntries = (ev: PageTransitionEvent) => {
    const win = ev.currentTarget as WindowWithId;
    const winId = win.__id__;
    graph.delete(winId);
    win.removeEventListener('unload', cleanupMapEntries);
    allWindows.delete(winId);
  };

  // eslint-disable-next-line deprecation/deprecation
  return (options: UseStylesOptions = {}) => {
    let { theme } = options;
    let winId: string | undefined;
    const win = useWindow() as WindowWithId | undefined;
    if (win) {
      win.__id__ = win.__id__ || getId();
      winId = win.__id__;
      if (!allWindows.has(winId)) {
        allWindows.add(winId);
        win.addEventListener('unload', cleanupMapEntries);
      }
    }

    const contextualTheme = useTheme();

    theme = theme || contextualTheme;
    const renderer = mergeStylesRenderer;

    const id = renderer.getId();
    const isStyleFunction = typeof styleOrFunction === 'function';
    const path = [winId, id, theme];
    let value = graphGet(graph, path);

    if (!value) {
      const styles = isStyleFunction ? (styleOrFunction as (theme: Theme) => TStyleSet)(theme!) : styleOrFunction;

      value = mergeStylesRenderer.renderStyles(styles, { targetWindow: win, rtl: !!theme!.rtl });
      graphSet(graph, path, value);
    }

    return value;
  };
}
