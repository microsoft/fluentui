{"code":"import { directionByIsDark } from '../utilities/direction-by-is-dark';\r\nimport { isDark } from '../utilities/is-dark';\r\n/**\r\n * Color algorithm using deltas from the reference color for states.\r\n *\r\n * @param palette The palette to operate on\r\n * @param reference The reference color to calculate a color for\r\n * @param restDelta The rest state offset from reference\r\n * @param hoverDelta The hover state offset from reference\r\n * @param activeDelta The active state offset from reference\r\n * @param focusDelta The focus state offset from reference\r\n * @param direction The direction the deltas move on the ramp, default goes darker for light references and lighter for dark references\r\n *\r\n * @internal\r\n */\r\nexport function deltaSwatchSet(palette, reference, restDelta, hoverDelta, activeDelta, focusDelta, direction) {\r\n    const referenceIndex = palette.closestIndexOf(reference);\r\n    if (direction === null || direction === void 0) {\r\n        direction = directionByIsDark(reference);\r\n    }\r\n    return {\r\n        rest: palette.get(referenceIndex + direction * restDelta),\r\n        hover: palette.get(referenceIndex + direction * hoverDelta),\r\n        active: palette.get(referenceIndex + direction * activeDelta),\r\n        focus: palette.get(referenceIndex + direction * focusDelta),\r\n    };\r\n}\r\n/**\r\n * Color algorithm using deltas from the reference color for states, allowing different deltas based on a light or dark reference color.\r\n *\r\n * @param palette The palette to operate on\r\n * @param reference The reference color to calculate a color for\r\n * @param lightRestDelta The rest offset for a light reference\r\n * @param lightHoverDelta The hover offset for a light reference\r\n * @param lightActiveDelta The rest offset for a light reference\r\n * @param lightFocusDelta The hover offset for a light reference\r\n * @param lightDirection The direction the deltas move on the ramp, default goes darker for light references\r\n * @param darkRestDelta The rest offset for a dark reference\r\n * @param darkHoverDelta The hover offset for a dark reference\r\n * @param darkActiveDelta The rest offset for a dark reference\r\n * @param darkFocusDelta The hover offset for a dark reference\r\n * @param darkDirection The direction the deltas move on the ramp, default goes lighter for dark references\r\n *\r\n * @internal\r\n */\r\nexport function deltaSwatchSetByLuminance(palette, reference, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection = undefined, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection = undefined) {\r\n    if (isDark(reference)) {\r\n        return deltaSwatchSet(palette, reference, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection);\r\n    }\r\n    else {\r\n        return deltaSwatchSet(palette, reference, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection);\r\n    }\r\n}\r\n","references":["/home/chassunc/projects/fluentui/packages/web-components/src/color/palette.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/recipe.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/swatch.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/utilities/direction-by-is-dark.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/utilities/is-dark.ts"]}
