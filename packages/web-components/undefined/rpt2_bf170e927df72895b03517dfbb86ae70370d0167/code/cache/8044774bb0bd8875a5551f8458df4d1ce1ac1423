{"code":"import { directionByIsDark } from '../utilities/direction-by-is-dark';\r\nimport { isDark } from '../utilities/is-dark';\r\n/**\r\n * @internal\r\n */\r\nexport function contrastAndDeltaSwatchSet(palette, reference, baseContrast, restDelta, hoverDelta, activeDelta, focusDelta, direction) {\r\n    if (direction === null || direction === void 0) {\r\n        direction = directionByIsDark(reference);\r\n    }\r\n    const baseIndex = palette.closestIndexOf(palette.colorContrast(reference, baseContrast));\r\n    return {\r\n        rest: palette.get(baseIndex + direction * restDelta),\r\n        hover: palette.get(baseIndex + direction * hoverDelta),\r\n        active: palette.get(baseIndex + direction * activeDelta),\r\n        focus: palette.get(baseIndex + direction * focusDelta),\r\n    };\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport function contrastAndDeltaSwatchSetByLuminance(palette, reference, lightBaseContrast, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection = undefined, darkBaseContrast, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection = undefined) {\r\n    if (isDark(reference)) {\r\n        return contrastAndDeltaSwatchSet(palette, reference, darkBaseContrast, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection);\r\n    }\r\n    else {\r\n        return contrastAndDeltaSwatchSet(palette, reference, lightBaseContrast, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection);\r\n    }\r\n}\r\n","references":["/home/chassunc/projects/fluentui/packages/web-components/src/color/palette.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/recipe.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/swatch.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/utilities/direction-by-is-dark.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/utilities/is-dark.ts"]}
