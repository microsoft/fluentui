{"code":"import { css, cssPartial } from '@microsoft/fast-element';\r\nimport { DesignToken, disabledCursor, display, focusVisible, forcedColorsStylesheetBehavior, } from '@microsoft/fast-foundation';\r\nimport { SystemColors } from '@microsoft/fast-web-utilities';\r\nimport { DirectionalStyleSheetBehavior, heightNumber } from '../styles/index';\r\nimport { accentFillRest, baseHeightMultiplier, bodyFont, controlCornerRadius, density, designUnit, disabledOpacity, focusStrokeOuter, focusStrokeWidth, neutralFillSecondaryRecipe, neutralFillSecondaryRest, neutralFillStealthActive, neutralFillStealthHover, neutralFillStealthRecipe, neutralFillStealthRest, neutralForegroundRest, strokeWidth, typeRampBaseFontSize, typeRampBaseLineHeight, } from '../design-tokens';\r\nconst ltr = css `\n  .expand-collapse-button svg {\n    transform: rotate(0deg);\n  }\n  :host(.nested) .expand-collapse-button {\n    left: var(--expand-collapse-button-nested-width, calc(${heightNumber} * -1px));\n  }\n  :host([selected])::after {\n    left: calc(${focusStrokeWidth} * 1px);\n  }\n  :host([expanded]) > .positioning-region .expand-collapse-button svg {\n    transform: rotate(90deg);\n  }\n`;\r\nconst rtl = css `\n  .expand-collapse-button svg {\n    transform: rotate(180deg);\n  }\n  :host(.nested) .expand-collapse-button {\n    right: var(--expand-collapse-button-nested-width, calc(${heightNumber} * -1px));\n  }\n  :host([selected])::after {\n    right: calc(${focusStrokeWidth} * 1px);\n  }\n  :host([expanded]) > .positioning-region .expand-collapse-button svg {\n    transform: rotate(90deg);\n  }\n`;\r\nexport const expandCollapseButtonSize = cssPartial `((${baseHeightMultiplier} / 2) * ${designUnit}) + ((${designUnit} * ${density}) / 2)`;\r\nconst expandCollapseHover = DesignToken.create('tree-item-expand-collapse-hover').withDefault((target) => {\r\n    const recipe = neutralFillStealthRecipe.getValueFor(target);\r\n    return recipe.evaluate(target, recipe.evaluate(target).hover).hover;\r\n});\r\nconst selectedExpandCollapseHover = DesignToken.create('tree-item-expand-collapse-selected-hover').withDefault((target) => {\r\n    const baseRecipe = neutralFillSecondaryRecipe.getValueFor(target);\r\n    const buttonRecipe = neutralFillStealthRecipe.getValueFor(target);\r\n    return buttonRecipe.evaluate(target, baseRecipe.evaluate(target).rest).hover;\r\n});\r\nexport const treeItemStyles = (context, definition) => css `\n    ${display('block')} :host {\n      contain: content;\n      position: relative;\n      outline: none;\n      color: ${neutralForegroundRest};\n      fill: currentcolor;\n      cursor: pointer;\n      font-family: ${bodyFont};\n      --expand-collapse-button-size: calc(${heightNumber} * 1px);\n      --tree-item-nested-width: 0;\n    }\n\n    :host(:focus) > .positioning-region {\n      outline: none;\n    }\n\n    :host(:focus) .content-region {\n      outline: none;\n    }\n\n    .positioning-region {\n      display: flex;\n      position: relative;\n      box-sizing: border-box;\n      background: ${neutralFillStealthRest};\n      border: calc(${strokeWidth} * 1px) solid transparent;\n      border-radius: calc(${controlCornerRadius} * 1px);\n      height: calc((${heightNumber} + 1) * 1px);\n    }\n\n    :host(:${focusVisible}) .positioning-region {\n      border-color: ${focusStrokeOuter};\n      box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${focusStrokeOuter} inset;\n    }\n\n    .positioning-region::before {\n      content: '';\n      display: block;\n      width: var(--tree-item-nested-width);\n      flex-shrink: 0;\n    }\n\n    :host(:not([disabled])) .positioning-region:hover {\n      background: ${neutralFillStealthHover};\n    }\n\n    :host(:not([disabled])) .positioning-region:active {\n      background: ${neutralFillStealthActive};\n    }\n\n    .content-region {\n      display: inline-flex;\n      align-items: center;\n      white-space: nowrap;\n      width: 100%;\n      height: calc(${heightNumber} * 1px);\n      margin-inline-start: calc(${designUnit} * 2px + 8px);\n      font-size: ${typeRampBaseFontSize};\n      line-height: ${typeRampBaseLineHeight};\n      font-weight: 400;\n    }\n\n    .items {\n      display: none;\n      ${\r\n/* Font size should be based off calc(1em + (design-unit + glyph-size-number) * 1px) -\r\n    update when density story is figured out */ ''} font-size: calc(1em + (${designUnit} + 16) * 1px);\n    }\n\n    .expand-collapse-button {\n      background: none;\n      border: none;\n      border-radius: calc(${controlCornerRadius} * 1px);\n      outline: none;\n      ${\r\n/* Width and Height should be based off calc(glyph-size-number + (design-unit * 4) * 1px) -\r\n    update when density story is figured out */ ''} width: calc((${expandCollapseButtonSize} + (${designUnit} * 2)) * 1px);\n      height: calc((${expandCollapseButtonSize} + (${designUnit} * 2)) * 1px);\n      padding: 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      margin: 0 6px;\n    }\n\n    .expand-collapse-button svg {\n      transition: transform 0.1s linear;\n      pointer-events: none;\n    }\n\n    .start,\n    .end {\n      display: flex;\n    }\n\n    .start {\n      ${\r\n/* need to swap out once we understand how horizontalSpacing will work */ ''} margin-inline-end: calc(${designUnit} * 2px + 2px);\n    }\n\n    .end {\n      ${\r\n/* need to swap out once we understand how horizontalSpacing will work */ ''} margin-inline-start: calc(${designUnit} * 2px + 2px);\n    }\n\n    :host(.expanded) > .items {\n      display: block;\n    }\n\n    :host([disabled]) {\n      opacity: ${disabledOpacity};\n      cursor: ${disabledCursor};\n    }\n\n    :host(.nested) .content-region {\n      position: relative;\n      margin-inline-start: var(--expand-collapse-button-size);\n    }\n\n    :host(.nested) .expand-collapse-button {\n      position: absolute;\n    }\n\n    :host(.nested) .expand-collapse-button:hover {\n      background: ${expandCollapseHover};\n    }\n\n    :host(:not([disabled])[selected]) .positioning-region {\n      background: ${neutralFillSecondaryRest};\n    }\n\n    :host(:not([disabled])[selected]) .expand-collapse-button:hover {\n      background: ${selectedExpandCollapseHover};\n    }\n\n    :host([selected])::after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: calc((${heightNumber} / 4) * 1px);\n      width: 3px;\n      height: calc((${heightNumber} / 2) * 1px);\n      ${\r\n/* The french fry background needs to be calculated based on the selected background state for this control.\r\n    We currently have no way of changing that, so setting to accent-foreground-rest for the time being */ ''} background: ${accentFillRest};\n      border-radius: calc(${controlCornerRadius} * 1px);\n    }\n\n    ::slotted(fluent-tree-item) {\n      --tree-item-nested-width: 1em;\n      --expand-collapse-button-nested-width: calc(${heightNumber} * -1px);\n    }\n  `.withBehaviors(new DirectionalStyleSheetBehavior(ltr, rtl), forcedColorsStylesheetBehavior(css `\n        :host {\n          color: ${SystemColors.ButtonText};\n        }\n        .positioning-region {\n          border-color: ${SystemColors.ButtonFace};\n          background: ${SystemColors.ButtonFace};\n        }\n        :host(:not([disabled])) .positioning-region:hover,\n        :host(:not([disabled])) .positioning-region:active,\n        :host(:not([disabled])[selected]) .positioning-region {\n          background: ${SystemColors.Highlight};\n        }\n        :host .positioning-region:hover .content-region,\n        :host([selected]) .positioning-region .content-region {\n          forced-color-adjust: none;\n          color: ${SystemColors.HighlightText};\n        }\n        :host([disabled][selected]) .positioning-region .content-region {\n          color: ${SystemColors.GrayText};\n        }\n        :host([selected])::after {\n          background: ${SystemColors.HighlightText};\n        }\n        :host(:${focusVisible}) .positioning-region {\n          forced-color-adjust: none;\n          border-color: ${SystemColors.ButtonText};\n          box-shadow: 0 0 0 2px inset ${SystemColors.ButtonFace};\n        }\n        :host([disabled]),\n        :host([disabled]) .content-region,\n        :host([disabled]) .positioning-region:hover .content-region {\n          opacity: 1;\n          color: ${SystemColors.GrayText};\n        }\n        :host(.nested) .expand-collapse-button:hover,\n        :host(:not([disabled])[selected]) .expand-collapse-button:hover {\n          background: ${SystemColors.ButtonFace};\n          fill: ${SystemColors.ButtonText};\n        }\n      `));\r\n","references":["/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-element/dist/fast-element.d.ts","/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-foundation/dist/fast-foundation.d.ts","/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-web-utilities/dist/index.d.ts","/home/chassunc/projects/fluentui/packages/web-components/src/styles/index.ts","/home/chassunc/projects/fluentui/packages/web-components/src/design-tokens.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/swatch.ts"]}
