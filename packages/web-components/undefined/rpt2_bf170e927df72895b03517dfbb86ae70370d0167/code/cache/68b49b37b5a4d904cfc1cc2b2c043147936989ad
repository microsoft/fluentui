{"code":"import { ColorRGBA64, rgbToRelativeLuminance } from '@microsoft/fast-colors';\r\nimport { contrast } from './utilities/relative-luminance';\r\n/** @public */\r\nexport const SwatchRGB = Object.freeze({\r\n    create(r, g, b) {\r\n        return new SwatchRGBImpl(r, g, b);\r\n    },\r\n    from(obj) {\r\n        return new SwatchRGBImpl(obj.r, obj.g, obj.b);\r\n    },\r\n});\r\n/**\r\n * Runtime test for an objects conformance with the SwatchRGB interface.\r\n * @internal\r\n */\r\nexport function isSwatchRGB(value) {\r\n    const test = {\r\n        r: 0,\r\n        g: 0,\r\n        b: 0,\r\n        toColorString: () => '',\r\n        contrast: () => 0,\r\n        relativeLuminance: 0,\r\n    };\r\n    for (const key in test) {\r\n        if (typeof test[key] !== typeof value[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * An RGB implementation of {@link Swatch}\r\n * @internal\r\n */\r\nclass SwatchRGBImpl extends ColorRGBA64 {\r\n    /**\r\n     *\r\n     * @param red - Red channel expressed as a number between 0 and 1\r\n     * @param green - Green channel expressed as a number between 0 and 1\r\n     * @param blue - Blue channel expressed as a number between 0 and 1\r\n     */\r\n    constructor(red, green, blue) {\r\n        super(red, green, blue, 1);\r\n        this.toColorString = this.toStringHexRGB;\r\n        this.contrast = contrast.bind(null, this);\r\n        this.createCSS = this.toColorString;\r\n        this.relativeLuminance = rgbToRelativeLuminance(this);\r\n    }\r\n    static fromObject(obj) {\r\n        return new SwatchRGBImpl(obj.r, obj.g, obj.b);\r\n    }\r\n}\r\n","references":["/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-colors/dist/index.d.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/utilities/relative-luminance.ts"]}
