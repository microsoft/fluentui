{"code":"import { css } from '@microsoft/fast-element';\r\nimport { SystemColors } from '@microsoft/fast-web-utilities';\r\nimport { display, focusVisible, forcedColorsStylesheetBehavior, } from '@microsoft/fast-foundation';\r\nimport { heightNumber } from '../size';\r\nimport { accentFillActive, accentFillHover, accentFillRest, accentForegroundActive, accentForegroundHover, accentForegroundRest, accentStrokeControlActive, accentStrokeControlHover, accentStrokeControlRest, bodyFont, controlCornerRadius, density, designUnit, focusStrokeInner, focusStrokeOuter, focusStrokeWidth, foregroundOnAccentActive, foregroundOnAccentHover, foregroundOnAccentRest, neutralFillActive, neutralFillHover, neutralFillRest, neutralFillStealthActive, neutralFillStealthHover, neutralFillStealthRest, neutralForegroundRest, neutralStrokeActive, neutralStrokeControlActive, neutralStrokeControlHover, neutralStrokeControlRest, neutralStrokeHover, neutralStrokeRest, strokeWidth, typeRampBaseFontSize, typeRampBaseLineHeight, } from '../../design-tokens';\r\n/**\r\n * @internal\r\n */\r\nexport const baseButtonStyles = (context, definition, interactivitySelector = '', nonInteractivitySelector = '') => css `\n    ${display('inline-flex')} :host {\n      position: relative;\n      box-sizing: border-box;\n      font-family: ${bodyFont};\n      outline: none;\n      font-size: ${typeRampBaseFontSize};\n      line-height: ${typeRampBaseLineHeight};\n      height: calc(${heightNumber} * 1px);\n      min-width: calc(${heightNumber} * 1px);\n      color: ${neutralForegroundRest};\n      border-radius: calc(${controlCornerRadius} * 1px);\n      fill: currentcolor;\n      cursor: pointer;\n    }\n\n    :host .control {\n      background: padding-box linear-gradient(${neutralFillRest}, ${neutralFillRest}),\n        border-box ${neutralStrokeControlRest};\n      border: calc(${strokeWidth} * 1px) solid transparent;\n      flex-grow: 1;\n      box-sizing: border-box;\n      display: inline-flex;\n      justify-content: center;\n      align-items: center;\n      padding: 0 calc((10 + (${designUnit} * 2 * ${density})) * 1px);\n      white-space: nowrap;\n      outline: none;\n      text-decoration: none;\n      color: inherit;\n      border-radius: inherit;\n      fill: inherit;\n      cursor: inherit;\n      font-family: inherit;\n    }\n\n    .control,\n    .end,\n    .start {\n      font: inherit;\n    }\n\n    .control.icon-only {\n      padding: 0;\n      line-height: 0;\n    }\n\n    :host .control${interactivitySelector}:hover {\n      background: padding-box linear-gradient(${neutralFillHover}, ${neutralFillHover}),\n        border-box ${neutralStrokeControlHover};\n    }\n\n    :host .control${interactivitySelector}:active {\n      background: padding-box linear-gradient(${neutralFillActive}, ${neutralFillActive}),\n        border-box ${neutralStrokeControlActive};\n    }\n\n    :host .control:${focusVisible} {\n      border-color: ${focusStrokeOuter} !important;\n      box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${focusStrokeOuter} inset !important;\n    }\n\n    :host .control${nonInteractivitySelector} {\n      background: padding-box linear-gradient(${neutralFillRest}, ${neutralFillRest}), border-box ${neutralStrokeRest};\n    }\n\n    .control::-moz-focus-inner {\n      border: 0;\n    }\n\n    .content {\n      pointer-events: none;\n    }\n\n    .start,\n    .end {\n      display: flex;\n      pointer-events: none;\n    }\n\n    .start {\n      margin-inline-end: 11px;\n    }\n\n    .end {\n      margin-inline-start: 11px;\n    }\n  `.withBehaviors(forcedColorsStylesheetBehavior(css `\n        :host .control {\n          background: ${SystemColors.ButtonFace};\n          border-color: ${SystemColors.ButtonText};\n          color: ${SystemColors.ButtonText};\n          fill: currentcolor;\n        }\n        :host(:not([disabled])) .control:hover,\n        :host .control${interactivitySelector}:hover,\n        .control${interactivitySelector}:hover {\n          forced-color-adjust: none;\n          background: ${SystemColors.Highlight};\n          color: ${SystemColors.HighlightText};\n        }\n        .control:${focusVisible},\n        :host .control:${focusVisible},\n        :host(:${focusVisible}) .control {\n          forced-color-adjust: none;\n          background: ${SystemColors.ButtonFace};\n          border-color: ${SystemColors.Highlight} !important;\n          box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${SystemColors.Highlight} !important;\n        }\n        :host([href]) .control {\n          background: ${SystemColors.ButtonFace};\n          border-color: ${SystemColors.LinkText};\n          color: ${SystemColors.LinkText};\n          fill: currentcolor;\n        }\n        :host([href]) .control:hover,\n        :host(.neutral[href]) .control:hover {\n          background: ${SystemColors.LinkText};\n          border-color: ${SystemColors.LinkText} !important;\n          color: ${SystemColors.HighlightText};\n          fill: currentcolor;\n        }\n        :host([href]) .control:${focusVisible}{\n          forced-color-adjust: none;\n          border-color: ${SystemColors.LinkText} !important;\n          box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${SystemColors.LinkText} !important;\n        }\n    `));\r\n/**\r\n * @internal\r\n */\r\nexport const AccentButtonStyles = (context, definition, interactivitySelector = '', nonInteractivitySelector = '') => css `\n    :host .control {\n      background: padding-box linear-gradient(${accentFillRest}, ${accentFillRest}),\n        border-box ${accentStrokeControlRest};\n      color: ${foregroundOnAccentRest};\n    }\n\n    :host .control${interactivitySelector}:hover {\n      background: padding-box linear-gradient(${accentFillHover}, ${accentFillHover}),\n        border-box ${accentStrokeControlHover};\n      color: ${foregroundOnAccentHover};\n    }\n\n    :host .control${interactivitySelector}:active {\n      background: padding-box linear-gradient(${accentFillActive}, ${accentFillActive}),\n        border-box ${accentStrokeControlActive};\n      color: ${foregroundOnAccentActive};\n    }\n\n    :host .control:${focusVisible} {\n      box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${focusStrokeOuter} inset,\n        0 0 0 calc(((${focusStrokeWidth} + ${strokeWidth}) - ${strokeWidth}) * 1px) ${focusStrokeInner} inset !important;\n    }\n\n    :host .control${nonInteractivitySelector} {\n      background: ${accentFillRest};\n    }\n  `.withBehaviors(forcedColorsStylesheetBehavior(css `\n        :host .control {\n          forced-color-adjust: none;\n          background: ${SystemColors.Highlight};\n          color: ${SystemColors.HighlightText};\n        }\n        :host .control${interactivitySelector}:hover,\n        :host .control${interactivitySelector}:active {\n          background: ${SystemColors.HighlightText};\n          border-color: ${SystemColors.Highlight};\n          color: ${SystemColors.Highlight};\n        }\n        :host .control:${focusVisible} {\n          background: ${SystemColors.Highlight};\n          box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${SystemColors.Highlight} inset,\n            0 0 0 calc(((${focusStrokeWidth} + ${strokeWidth}) - ${strokeWidth}) * 1px) ${SystemColors.HighlightText} inset !important;\n        }\n        :host([href]) .control {\n          background: ${SystemColors.LinkText};\n          color: ${SystemColors.HighlightText};\n        }\n        :host([href]) .control:hover {\n          background: ${SystemColors.ButtonFace};\n          border-color: ${SystemColors.LinkText};\n          box-shadow: none;\n          color: ${SystemColors.LinkText};\n          fill: currentcolor;\n        }\n        :host([href]) .control:${focusVisible} {\n          background: ${SystemColors.LinkText};\n          box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${SystemColors.LinkText} inset,\n            0 0 0 calc(((${focusStrokeWidth} + ${strokeWidth}) - ${strokeWidth}) * 1px) ${SystemColors.HighlightText} inset !important;\n          color: ${SystemColors.HighlightText};\n          fill: currentcolor;\n        }\n      `));\r\n/**\r\n * @internal\r\n */\r\nexport const HypertextStyles = (context, definition, interactivitySelector = '', nonInteractivitySelector = '') => css `\n    :host {\n      height: auto;\n      font-family: inherit;\n      font-size: inherit;\n      line-height: inherit;\n      min-width: 0;\n    }\n\n    :host .control {\n      display: inline;\n      padding: 0;\n      background: transparent;\n      border: none;\n      box-shadow: none;\n      line-height: 1;\n      text-decoration: underline 1px;\n    }\n\n    :host .control:not([href]) {\n      background: transparent;\n    }\n\n    :host .control${interactivitySelector} {\n      background: transparent;\n      color: ${accentForegroundRest};\n    }\n\n    :host .control${interactivitySelector}:hover {\n      background: transparent;\n      color: ${accentForegroundHover};\n      text-decoration: none;\n    }\n\n    :host .control${interactivitySelector}:active {\n      background: transparent;\n      color: ${accentForegroundActive};\n      text-decoration: none;\n    }\n\n    :host .control:${focusVisible} {\n      box-shadow: 0 0 0 calc(${focusStrokeWidth} * 1px) ${focusStrokeOuter} !important;\n    }\n\n    :host .control${nonInteractivitySelector} {\n      background: transparent;\n    }\n  `.withBehaviors(forcedColorsStylesheetBehavior(css `\n      :host .control${interactivitySelector}:hover {\n        color: ${SystemColors.Highlight};\n        fill: currentcolor;\n      }\n      :host .control:${focusVisible} {\n        color: ${SystemColors.LinkText};\n      }\n      `));\r\n/**\r\n * @internal\r\n */\r\nexport const LightweightButtonStyles = (context, definition, interactivitySelector = '', nonInteractivitySelector = '') => css `\n    :host {\n      color: ${accentForegroundRest};\n    }\n\n    :host .control {\n      background: ${neutralFillStealthRest};\n    }\n\n    :host .control${interactivitySelector}:hover {\n      background: ${neutralFillStealthHover};\n      color: ${accentForegroundHover};\n    }\n\n    :host .control${interactivitySelector}:active {\n      background: ${neutralFillStealthActive};\n      color: ${accentForegroundActive};\n    }\n\n    :host .control${nonInteractivitySelector} {\n      background: ${neutralFillStealthRest};\n    }\n  `.withBehaviors(forcedColorsStylesheetBehavior(css `\n        :host .control {\n          border-color: ${SystemColors.ButtonFace};\n          color: ${SystemColors.ButtonText};\n        }\n        :host .control${interactivitySelector}:hover,\n        :host .control${interactivitySelector}:active,\n        :host .control:${focusVisible} {\n          border-color: ${SystemColors.Highlight};\n          background: ${SystemColors.Highlight};\n          box-shadow: none;\n          color: ${SystemColors.HighlightText};\n        }\n        :host([href]) .control {\n          border-color: ${SystemColors.ButtonFace};\n          color: ${SystemColors.LinkText};\n        }\n        :host([href]) .control:hover,\n        :host([href]) .control:${focusVisible} {\n          background: ${SystemColors.ButtonFace};\n          box-shadow: none;\n          color: ${SystemColors.LinkText};\n        }\n      `));\r\n/**\r\n * @internal\r\n */\r\nexport const OutlineButtonStyles = (context, definition, interactivitySelector = '', nonInteractivitySelector = '') => css `\n    :host .control {\n      background: transparent !important;\n      border-color: ${neutralStrokeRest};\n    }\n\n    :host .control${interactivitySelector}:hover {\n      border-color: ${neutralStrokeHover};\n    }\n\n    :host .control${interactivitySelector}:active {\n      border-color: ${neutralStrokeActive};\n    }\n\n    :host .control${nonInteractivitySelector} {\n      background: transparent !important;\n      border-color: ${neutralStrokeRest};\n    }\n  `.withBehaviors(forcedColorsStylesheetBehavior(css `\n        :host .control${nonInteractivitySelector} {\n          border-color: ${SystemColors.ButtonText};\n        }\n        :host .control${interactivitySelector}:hover {\n          border-color: ${SystemColors.Highlight};\n          color: ${SystemColors.ButtonText};\n        }\n        :host([href]) {\n          border-color: ${SystemColors.LinkText};\n        }\n        :host([href]) .control:hover {\n          box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${SystemColors.LinkText};\n          color: ${SystemColors.LinkText};\n        }\n      `));\r\n/**\r\n * @internal\r\n */\r\nexport const StealthButtonStyles = (context, definition, interactivitySelector = '', nonInteractivitySelector = '') => css `\n    :host .control {\n      background: ${neutralFillStealthRest};\n    }\n\n    :host .control${interactivitySelector}:hover {\n      background: ${neutralFillStealthHover};\n    }\n\n    :host .control${interactivitySelector}:active {\n      background: ${neutralFillStealthActive};\n    }\n\n    :host .control${nonInteractivitySelector} {\n      background: ${neutralFillStealthRest};\n    }\n  `.withBehaviors(forcedColorsStylesheetBehavior(css `\n        :host .control {\n          background: ${SystemColors.ButtonFace};\n          border-color: ${SystemColors.ButtonFace};\n          color: ${SystemColors.ButtonText};\n          fill: currentcolor;\n        }\n        :host .control${interactivitySelector}:hover,\n        :host .control${interactivitySelector}:active,\n        :host .control:${focusVisible} {\n          background: ${SystemColors.Highlight};\n          border-color: ${SystemColors.Highlight};\n          box-shadow: none !important;\n          color: ${SystemColors.HighlightText};\n          fill: currentcolor;\n        }\n        :host([href]) .control {\n          border-color: ${SystemColors.ButtonFace};\n          color: ${SystemColors.LinkText};\n        }\n        :host([href]) .control:hover,\n        :host([href]) .control:${focusVisible} {\n          background: ${SystemColors.LinkText};\n          border-color: ${SystemColors.LinkText};\n          box-shadow: none !important;\n          color: ${SystemColors.HighlightText};\n          fill: currentcolor;\n        }\n      `));\r\n","references":["/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-element/dist/fast-element.d.ts","/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-web-utilities/dist/index.d.ts","/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-foundation/dist/fast-foundation.d.ts","/home/chassunc/projects/fluentui/packages/web-components/src/styles/size.ts","/home/chassunc/projects/fluentui/packages/web-components/src/design-tokens.ts"]}
