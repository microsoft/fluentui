{"code":"import { __decorate } from \"tslib\";\r\nimport { composedParent, Card as FoundationCard, cardTemplate as template } from '@microsoft/fast-foundation';\r\nimport { attr, Observable } from '@microsoft/fast-element';\r\nimport { parseColorHexRGB } from '@microsoft/fast-colors';\r\nimport { fillColor, neutralFillLayerRecipe, neutralPalette } from '../design-tokens';\r\nimport { SwatchRGB } from '../color/swatch';\r\nimport { PaletteRGB } from '../color/palette';\r\nimport { cardStyles as styles } from './card.styles';\r\n/**\r\n * @public\r\n */\r\nexport class Card extends FoundationCard {\r\n    cardFillColorChanged(prev, next) {\r\n        if (next) {\r\n            const parsedColor = parseColorHexRGB(next);\r\n            if (parsedColor !== null) {\r\n                this.neutralPaletteSource = next;\r\n                fillColor.setValueFor(this, SwatchRGB.create(parsedColor.r, parsedColor.g, parsedColor.b));\r\n            }\r\n        }\r\n    }\r\n    neutralPaletteSourceChanged(prev, next) {\r\n        if (next) {\r\n            const color = parseColorHexRGB(next);\r\n            const swatch = SwatchRGB.create(color.r, color.g, color.b);\r\n            neutralPalette.setValueFor(this, PaletteRGB.create(swatch));\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    handleChange(source, propertyName) {\r\n        if (!this.cardFillColor) {\r\n            fillColor.setValueFor(this, (target) => neutralFillLayerRecipe.getValueFor(target).evaluate(target, fillColor.getValueFor(source)).rest);\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const parent = composedParent(this);\r\n        if (parent) {\r\n            const parentNotifier = Observable.getNotifier(parent);\r\n            parentNotifier.subscribe(this, 'fillColor');\r\n            parentNotifier.subscribe(this, 'neutralPalette');\r\n            this.handleChange(parent, 'fillColor');\r\n        }\r\n    }\r\n}\r\n__decorate([\r\n    attr({\r\n        attribute: 'card-fill-color',\r\n        mode: 'fromView',\r\n    })\r\n], Card.prototype, \"cardFillColor\", void 0);\r\n__decorate([\r\n    attr({\r\n        attribute: 'neutral-palette-source',\r\n        mode: 'fromView',\r\n    })\r\n], Card.prototype, \"neutralPaletteSource\", void 0);\r\n/**\r\n * The Fluent Card Element. Implements {@link @microsoft/fast-foundation#Card},\r\n * {@link @microsoft/fast-foundation#CardTemplate}\r\n *\r\n *\r\n * @public\r\n * @remarks\r\n * HTML Element: \\<fluent-card\\>\r\n */\r\nexport const fluentCard = Card.compose({\r\n    baseName: 'card',\r\n    baseClass: FoundationCard,\r\n    template,\r\n    styles,\r\n});\r\n/**\r\n * Styles for Card\r\n * @public\r\n */\r\nexport const cardStyles = styles;\r\n","references":["/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-foundation/dist/fast-foundation.d.ts","/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-element/dist/fast-element.d.ts","/home/chassunc/projects/fluentui/node_modules/@microsoft/fast-colors/dist/index.d.ts","/home/chassunc/projects/fluentui/packages/web-components/src/design-tokens.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/swatch.ts","/home/chassunc/projects/fluentui/packages/web-components/src/color/palette.ts","/home/chassunc/projects/fluentui/packages/web-components/src/card/card.styles.ts"]}
