@import '~@fluentui/common-styles/src/themeCssVariables';
@import '~@fluentui/common-styles/src/highContrast';
@import '~@fluentui/common-styles/src/focusBorder';

/**
  * Tokens:
  * The word "active" in the token refers to the selected section of the slider
  * The word "inactive" in the token refers to the unselected section of the slider
  */

@mixin activeSectionHoverStyles() {
  .activeSection {
    background-color: var($semanticColorsInputBackgroundChecked);
    @include high-contrast {
      background-color: Highlight;
    }
  }
}

@mixin activeSectionActiveStyles {
  .activeSection {
    background-color: var($semanticColorsInputBackgroundCheckedHovered);
    @include high-contrast {
      background-color: Highlight;
    }
  }
}

// Styles for when the slider is hovered or active
@mixin inactiveSectionActiveStyles {
  .inactiveSection {
    background-color: var($semanticColorsInputPlaceholderBackgroundChecked);
    @include high-contrast {
      border-color: Highlight;
    }
  }
}

// Styles for when the slider is hovered or active
@mixin thumbActiveStyles {
  .thumb {
    border: 2px solid var($semanticColorsInputBackgroundCheckedHovered);
    @include high-contrast {
      bordercolor: Highlight;
    }
  }
}

@mixin slideBoxActiveZeroTickStyles {
  .zeroTick {
    background-color: var($semanticColorsInputPlaceholderBackgroundChecked);
    @include high-contrast {
      background-color: Highlight;
    }
  }
}

.root {
  @include fonts-medium;
  user-select: none;

  &.vertical {
    margin-right: 8;
  }

  &:not(.disabled) {
    &:active {
      @include activeSectionActiveStyles();
      @include inactiveSectionActiveStyles();
      @include thumbActiveStyles();
      @include slideBoxActiveZeroTickStyles();
    }

    &:hover {
      @include activeSectionHoverStyles();
      @include inactiveSectionActiveStyles();
      @include thumbActiveStyles();
      @include slideBoxActiveZeroTickStyles();
    }
  }
}

.titleLabel {
  padding: 0;
}

.container {
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  &.vertical {
    flex-direction: column;
    height: 100%;
    text-align: center;
    margin: 8px 0;
  }
}

.slideBox {
  @include focus-border();
  background: transparent;
  border: none;
  flex-grow: 1;
  line-height: 28px;
  display: flex;
  align-items: center;
  height: 28px;
  width: auto;
  padding: 0 8px; // Make room for thumb at ends of line

  &.vertical {
    height: 100%;
    width: 28px;
    padding: 8px 0; // Make room for thumb at bottom of line
  }
}

.thumb {
  border-width: 2px;
  border-style: solid;
  border-color: var($semanticColorsSmallInputBorder);
  border-radius: 10px;
  box-sizing: border-box;
  background: var($semanticColorsInputBackground);
  display: block;
  width: 16px;
  height: 16px;
  position: absolute;
  transform: translateX(-50%);

  // TODO either remove or implement for RTL transform: translateX(50%);

  &:not(.vertical) {
    top: -6px;
  }

  &.vertical {
    left: -6px;
    margin: 0 auto;
    transform: translateY(8px);
  }

  &.disabled {
    border-color: var($semanticColorsDisabledBorder);
    @include high-contrast {
      bordercolor: GrayText;
    }
  }

  /**
   * TODO Implement animations
   * .showTransitions && {
   * transition: `left ${AnimationVariables.durationValue3} ${AnimationVariables.easeFunction1}`;
   * };
   */
}

.line {
  display: flex;
  position: relative;
  width: 100%;

  &.vertical {
    height: 100%;
    width: 4px;
    margin: 0 auto;
    flex-direction: column-reverse;
  }
}

.lineContainer {
  border-radius: 4px;
  box-sizing: border-box;
  height: 4px;
  width: 100%;

  &.vertical {
    width: 4px;
    height: 100%;
  }
}

.activeSection {
  background: var($semanticColorsSmallInputBorder);

  @include high-contrast {
    backgroundcolor: WindowText;
  }

  &.disabled {
    background: var($semanticColorsDisabledText);
    @include high-contrast {
      backgroundcolor: GrayText;
      bordercolor: GrayText;
    }
  }

  /**
   * TODO Implement animations
   * transition: `width ${nimationVariables.durationValue3} ${AnimationVariables.easeFunction1}`;
   */
}

.inactiveSection {
  background: var($semanticColorsDisabledBorder);
  @include high-contrast {
    border: 1px solid WindowText;
  }

  &.disabled {
    background: var($semanticColorsDisabledBackground);
    @include high-contrast {
      bordercolor: GrayText;
    }
  }

  /**
    * @TODO Implement Correct animation styles
    * transition: `width ${nimationVariables.durationValue3} ${AnimationVariables.easeFunction1}`;
    */
}

.zeroTick {
  position: absolute;
  background: var($semanticColorsDisabledBorder);
  width: 1px;
  height: 16px;
  transform: translateY(-6px);

  @include high-contrast {
    backgroundcolor: WindowText;
  }

  &.disabled {
    background: var($semanticColorsDisabledBackground);
    @include high-contrast {
      backgroundcolor: GrayText;
    }
  }

  &.vertical {
    width: 16px;
    height: 1px;
    transform: translateX(-6px);
    // TODO: either remove or implement for rtl translateX(6px)
  }
}

.valueLabel {
  flex-shrink: 1;
  width: 30px;
  line-height: 1px;
  margin: 0 8px;
  white-space: nowrap;
  width: 40px;

  &.vertical {
    margin: 0 auto;
    white-space: nowrap;
    width: 40px;
  }
}
