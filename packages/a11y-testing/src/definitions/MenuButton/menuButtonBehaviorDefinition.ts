import { Rule } from './../../types';
import { BehaviorRule } from './../../rules/rules';

const triggerNotTabbable: Rule[] = [
  BehaviorRule.slot('trigger').forProps({ tabbableTrigger: true }).hasAttribute('tabIndex', '0'),
  BehaviorRule.slot('trigger').forProps({ tabbableTrigger: false }).doesNotHaveAttribute('tabIndex').hide(),
];

const triggerTabbable: Rule[] = [
  BehaviorRule.slot('trigger')
    .forProps({ tabbableTrigger: true })
    .doesNotHaveAttribute('tabIndex')
    .description(`if it is 'tabbable' and 'tabbableTrigger' is 'true'.`),
];

const triggerWithTabIndex: Rule[] = [
  BehaviorRule.slot('trigger')
    .forProps({ tabbableTrigger: true })
    .hasAttribute('tabIndex', '-1')
    .description(`if current 'trigger' element has 'tabindex=-1' and 'tabbableTrigger' is 'true'.`),
];

const menuButtonBehaviorDefinitionTriggerSlot: Rule[] = [
  BehaviorRule.slot('trigger').forProps({ open: true }).hasAttribute('aria-controls', 'menuID'),
  BehaviorRule.slot('trigger').forProps({ open: false }).doesNotHaveAttribute('aria-controls').hide(),
  BehaviorRule.slot('trigger').forProps({ open: true }).hasAttribute('aria-expanded', 'true'),
  BehaviorRule.slot('trigger').forProps({ open: false }).doesNotHaveAttribute('aria-expanded').hide(),
  BehaviorRule.slot('trigger').forProps({ contextMenu: false }).hasAttribute('aria-haspopup', 'true'),
  BehaviorRule.slot('trigger').forProps({ contextMenu: true }).doesNotHaveAttribute('aria-haspopup').hide(),
  BehaviorRule.slot('trigger').forProps({ open: true }).hasAttribute('tabIndex', '-1'),
  BehaviorRule.slot('trigger')
    .hasAttribute('id', 'triggerElementID', true)
    .description(`if 'ID' is defined for the 'trigger' slot.`),
  BehaviorRule.slot('trigger').forProps({ contextMenu: true, open: true }).doesNotHaveAttribute('aria-expanded'),
];

export const menuButtonBehaviorDefinitionTriggerSlotTabbable = menuButtonBehaviorDefinitionTriggerSlot.concat(
  triggerTabbable,
);
export const menuButtonBehaviorDefinitionTriggerSlotNotTabbable = menuButtonBehaviorDefinitionTriggerSlot.concat(
  triggerNotTabbable,
);
export const menuButtonBehaviorDefinitionTriggerWithTabIndex = menuButtonBehaviorDefinitionTriggerSlot.concat(
  triggerWithTabIndex,
);

export const menuButtonBehaviorDefinitionMenuSlot: Rule[] = [
  BehaviorRule.slot('menu')
    .forProps({ open: true })
    .hasAttribute('aria-labelledby', 'triggerElementID', true)
    .description(`if 'ID' is defined for the 'trigger' slot.`),
  BehaviorRule.slot('menu')
    .forProps({ open: true })
    .hasAttribute('id', 'menuID', true)
    .description(`if 'ID' is defined on the 'menu' slot.`),
];

export const menuButtonBehaviorDefinitionTriggerSlotWithoutID: Rule[] = [
  BehaviorRule.slot('trigger').hasAttribute('id').description(`if 'id' is not set and is autogenerated.`),
];

export const menuButtonBehaviorDefinitionMenuSlotWithoutID: Rule[] = [
  BehaviorRule.slot('menu')
    .forProps({ open: true })
    .hasAttribute('id')
    .description(`if 'id' is not set and is autogenerated.`),
];

export const menuButtonBehaviorDefinition = menuButtonBehaviorDefinitionTriggerSlot.concat(
  menuButtonBehaviorDefinitionMenuSlot,
  triggerTabbable,
  triggerNotTabbable,
  triggerWithTabIndex,
  menuButtonBehaviorDefinitionTriggerSlotWithoutID,
  menuButtonBehaviorDefinitionMenuSlotWithoutID,
);
