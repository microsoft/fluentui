import * as React from 'react';

export type MessageBarTransitionContextValue = {
  className: string;
  nodeRef: React.Ref<HTMLDivElement | null>;
};

const messageBarTransitionContext = React.createContext<MessageBarTransitionContextValue | undefined>(undefined);

/**
 * @internal
 */
export const messageBarTransitionContextDefaultValue: MessageBarTransitionContextValue = {
  className: '',
  nodeRef: React.createRef<HTMLDivElement | null>(),
};

/**
 * Context to pass animation className to MessageBar components
 * @internal
 */
export const MessageBarTransitionContextProvider = messageBarTransitionContext.Provider;
/**
 * @internal
 */
export const useMessageBarTransitionContext = () =>
  React.useContext(messageBarTransitionContext) ?? messageBarTransitionContextDefaultValue;
import * as React from 'react';

export type MessageBarContextValue = {
  layout: 'multiline' | 'singleline' | 'auto';
  actionsRef: React.MutableRefObject<HTMLDivElement | null>;
  bodyRef: React.MutableRefObject<HTMLDivElement | null>;
  titleId: string;
};
const messageBarContext = React.createContext<MessageBarContextValue | undefined>(undefined);

export const messageBarContextDefaultValue: MessageBarContextValue = {
  titleId: '',
  layout: 'singleline',
  actionsRef: React.createRef(),
  bodyRef: React.createRef(),
};

export const MessageBarContextProvider = messageBarContext.Provider;
export const useMessageBarContext = () => React.useContext(messageBarContext) ?? messageBarContextDefaultValue;
export * from './messageBarContext';
export * from './messageBarTransitionContext';
export * from './components/MessageBar/index';
export * from './components/MessageBarGroup/index';
import { isConformant as baseIsConformant } from '@fluentui/react-conformance';
import type { IsConformantOptions, TestObject } from '@fluentui/react-conformance';
import griffelTests from '@fluentui/react-conformance-griffel';

export function isConformant<TProps = {}>(
  testInfo: Omit<IsConformantOptions<TProps>, 'componentPath'> & { componentPath?: string },
) {
  const defaultOptions: Partial<IsConformantOptions<TProps>> = {
    tsConfig: { configName: 'tsconfig.spec.json' },
    componentPath: require.main?.filename.replace('.test', ''),
    extraTests: griffelTests as TestObject<TProps>,
  };

  baseIsConformant(defaultOptions, testInfo);
}
import { makeResetStyles, mergeClasses } from '@griffel/react';
import { typographyStyles } from '@fluentui/react-theme';
import type { SlotClassNames } from '@fluentui/react-utilities';
import type { MessageBarTitleSlots, MessageBarTitleState } from './MessageBarTitle.types';

export const messageBarTitleClassNames: SlotClassNames<MessageBarTitleSlots> = {
  root: 'fui-MessageBarTitle',
};

/**
 * Styles for the root slot
 */
const useRootBaseStyles = makeResetStyles({
  ...typographyStyles.body1Strong,
  '::after': {
    content: '" "',
  },
});

/**
 * Apply styling to the MessageBarTitle slots based on the state
 */
export const useMessageBarTitleStyles_unstable = (state: MessageBarTitleState): MessageBarTitleState => {
  const rootBaseStyles = useRootBaseStyles();
  state.root.className = mergeClasses(messageBarTitleClassNames.root, rootBaseStyles, state.root.className);

  return state;
};
import type { ComponentProps, ComponentState, Slot } from '@fluentui/react-utilities';

export type MessageBarTitleSlots = {
  root: Slot<'span'>;
};

/**
 * MessageBarTitle Props
 */
export type MessageBarTitleProps = ComponentProps<MessageBarTitleSlots>;

/**
 * State used in rendering MessageBarTitle
 */
export type MessageBarTitleState = ComponentState<MessageBarTitleSlots>;
import * as React from 'react';
import { render } from '@testing-library/react';
import { isConformant } from '../../testing/isConformant';
import { MessageBarTitle } from './MessageBarTitle';

describe('MessageBarTitle', () => {
  isConformant({
    Component: MessageBarTitle,
    displayName: 'MessageBarTitle',
  });

  // TODO add more tests here, and create visual regression tests in /apps/vr-tests

  it('renders a default state', () => {
    const result = render(<MessageBarTitle>Default MessageBarTitle</MessageBarTitle>);
    expect(result.container).toMatchSnapshot();
  });
});
/** @jsxRuntime automatic */
/** @jsxImportSource @fluentui/react-jsx-runtime */

import { assertSlots } from '@fluentui/react-utilities';
import type { MessageBarTitleState, MessageBarTitleSlots } from './MessageBarTitle.types';

/**
 * Render the final JSX of MessageBarTitle
 */
export const renderMessageBarTitle_unstable = (state: MessageBarTitleState) => {
  assertSlots<MessageBarTitleSlots>(state);

  return <state.root />;
};
export * from './MessageBarTitle';
export * from './MessageBarTitle.types';
export * from './renderMessageBarTitle';
export * from './useMessageBarTitle';
export * from './useMessageBarTitleStyles.styles';
import * as React from 'react';
import type { ForwardRefComponent } from '@fluentui/react-utilities';
import { useCustomStyleHook_unstable } from '@fluentui/react-shared-contexts';
import { useMessageBarTitle_unstable } from './useMessageBarTitle';
import { renderMessageBarTitle_unstable } from './renderMessageBarTitle';
import { useMessageBarTitleStyles_unstable } from './useMessageBarTitleStyles.styles';
import type { MessageBarTitleProps } from './MessageBarTitle.types';

/**
 * MessageBarTitle component
 */
export const MessageBarTitle: ForwardRefComponent<MessageBarTitleProps> = React.forwardRef((props, ref) => {
  const state = useMessageBarTitle_unstable(props, ref);

  useMessageBarTitleStyles_unstable(state);
  useCustomStyleHook_unstable('useMessageBarTitleStyles_unstable')(state);
  return renderMessageBarTitle_unstable(state);
});

MessageBarTitle.displayName = 'MessageBarTitle';
import * as React from 'react';
import { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';
import type { MessageBarTitleProps, MessageBarTitleState } from './MessageBarTitle.types';
import { useMessageBarContext } from '../../contexts/messageBarContext';

/**
 * Create the state required to render MessageBarTitle.
 *
 * The returned state can be modified with hooks such as useMessageBarTitleStyles_unstable,
 * before being passed to renderMessageBarTitle_unstable.
 *
 * @param props - props from this instance of MessageBarTitle
 * @param ref - reference to root HTMLElement of MessageBarTitle
 */
export const useMessageBarTitle_unstable = (
  props: MessageBarTitleProps,
  ref: React.Ref<HTMLElement>,
): MessageBarTitleState => {
  const { titleId } = useMessageBarContext();

  return {
    components: {
      root: 'span',
    },
    root: slot.always(
      getIntrinsicElementProps('span', {
        ref,
        id: titleId,
        ...props,
      }),
      { elementType: 'span' },
    ),
  };
};
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageBarTitle renders a default state 1`] = `
<div>
  <span
    class="fui-MessageBarTitle"
    id=""
  >
    Default MessageBarTitle
  </span>
</div>
`;
/** @jsxRuntime automatic */
/** @jsxImportSource @fluentui/react-jsx-runtime */

import { assertSlots } from '@fluentui/react-utilities';
import type {
  MessageBarActionsState,
  MessageBarActionsSlots,
  MessageBarActionsContextValues,
} from './MessageBarActions.types';
import { ButtonContextProvider } from '@fluentui/react-button';

/**
 * Render the final JSX of MessageBarActions
 */
export const renderMessageBarActions_unstable = (
  state: MessageBarActionsState,
  contexts: MessageBarActionsContextValues,
) => {
  assertSlots<MessageBarActionsSlots>(state);
  if (state.layout === 'multiline') {
    return (
      <ButtonContextProvider value={contexts.button}>
        {state.containerAction && <state.containerAction />}
        <state.root />
      </ButtonContextProvider>
    );
  }

  return (
    <ButtonContextProvider value={contexts.button}>
      <state.root />
      {state.containerAction && <state.containerAction />}
    </ButtonContextProvider>
  );
};
import * as React from 'react';
import { MessageBarActionsContextValues } from './MessageBarActions.types';

export function useMessageBarActionsContextValue_unstable(): MessageBarActionsContextValues {
  const buttonContext = React.useMemo(
    () => ({
      size: 'small' as const,
    }),
    [],
  );

  return {
    button: buttonContext,
  };
}
import * as React from 'react';
import { render } from '@testing-library/react';
import { isConformant } from '../../testing/isConformant';
import { MessageBarActions } from './MessageBarActions';
import { MessageBarActionsProps } from './MessageBarActions.types';

describe('MessageBarActions', () => {
  isConformant<MessageBarActionsProps>({
    Component: MessageBarActions,
    displayName: 'MessageBarActions',
    disabledTests: [
      // TODO: having problems due to the fact root of DialogTitle is Fragment
      'component-has-static-classnames-object',
    ],
  });

  // TODO add more tests here, and create visual regression tests in /apps/vr-tests

  it('renders a default state', () => {
    const result = render(<MessageBarActions>Default MessageBarActions</MessageBarActions>);
    expect(result.container).toMatchSnapshot();
  });
});
import * as React from 'react';
import type { ForwardRefComponent } from '@fluentui/react-utilities';
import { useCustomStyleHook_unstable } from '@fluentui/react-shared-contexts';
import { useMessageBarActions_unstable } from './useMessageBarActions';
import { renderMessageBarActions_unstable } from './renderMessageBarActions';
import { useMessageBarActionsStyles_unstable } from './useMessageBarActionsStyles.styles';
import type { MessageBarActionsProps } from './MessageBarActions.types';
import { useMessageBarActionsContextValue_unstable } from './useMessageBarActionsContextValues';

/**
 * MessageBarActions component
 */
export const MessageBarActions: ForwardRefComponent<MessageBarActionsProps> = React.forwardRef((props, ref) => {
  const state = useMessageBarActions_unstable(props, ref);

  useMessageBarActionsStyles_unstable(state);
  useCustomStyleHook_unstable('useMessageBarActionsStyles_unstable')(state);
  return renderMessageBarActions_unstable(state, useMessageBarActionsContextValue_unstable());
});

MessageBarActions.displayName = 'MessageBarActions';
import type { ComponentProps, ComponentState, Slot } from '@fluentui/react-utilities';
import type { ButtonContextValue } from '@fluentui/react-button';
import type { MessageBarContextValue } from '../../contexts/messageBarContext';

export type MessageBarActionsSlots = {
  root: Slot<'div'>;
  /**
   * Generally the 'Dismiss' button for the MessageBar
   */
  containerAction?: Slot<'div'>;
};

export type MessageBarActionsContextValues = {
  button: ButtonContextValue;
};

/**
 * MessageBarActions Props
 */
export type MessageBarActionsProps = ComponentProps<MessageBarActionsSlots>;

/**
 * State used in rendering MessageBarActions
 */
export type MessageBarActionsState = ComponentState<MessageBarActionsSlots> &
  Pick<Required<MessageBarContextValue>, 'layout'>;
import * as React from 'react';
import { getIntrinsicElementProps, slot, useMergedRefs } from '@fluentui/react-utilities';
import type { MessageBarActionsProps, MessageBarActionsState } from './MessageBarActions.types';
import { useMessageBarContext } from '../../contexts/messageBarContext';

/**
 * Create the state required to render MessageBarActions.
 *
 * The returned state can be modified with hooks such as useMessageBarActionsStyles_unstable,
 * before being passed to renderMessageBarActions_unstable.
 *
 * @param props - props from this instance of MessageBarActions
 * @param ref - reference to root HTMLElement of MessageBarActions
 */
export const useMessageBarActions_unstable = (
  props: MessageBarActionsProps,
  ref: React.Ref<HTMLDivElement>,
): MessageBarActionsState => {
  const { layout = 'singleline', actionsRef } = useMessageBarContext();
  return {
    components: {
      root: 'div',
      containerAction: 'div',
    },
    containerAction: slot.optional(props.containerAction, { renderByDefault: false, elementType: 'div' }),
    root: slot.always(
      getIntrinsicElementProps('div', {
        ref: useMergedRefs(ref, actionsRef),
        ...props,
      }),
      { elementType: 'div' },
    ),
    layout,
  };
};
export * from './MessageBarActions';
export * from './MessageBarActions.types';
export * from './renderMessageBarActions';
export * from './useMessageBarActions';
export * from './useMessageBarActionsStyles.styles';
export * from './useMessageBarActionsContextValues';
import { makeResetStyles, makeStyles, mergeClasses } from '@griffel/react';
import type { SlotClassNames } from '@fluentui/react-utilities';
import { tokens } from '@fluentui/react-theme';
import type { MessageBarActionsSlots, MessageBarActionsState } from './MessageBarActions.types';

export const messageBarActionsClassNames: SlotClassNames<MessageBarActionsSlots> = {
  root: 'fui-MessageBarActions',
  containerAction: 'fui-MessageBarActions__containerAction',
};

/**
 * Styles for the root slot
 */
const useRootBaseStyles = makeResetStyles({
  gridArea: 'secondaryActions',
  display: 'flex',
  columnGap: tokens.spacingHorizontalM,
  paddingRight: tokens.spacingHorizontalM,
});

const useContainerActionBaseStyles = makeResetStyles({
  gridArea: 'actions',
  paddingRight: tokens.spacingHorizontalM,
});

const useMultilineStyles = makeStyles({
  root: {
    justifyContent: 'end',
    marginTop: tokens.spacingVerticalMNudge,
    marginBottom: tokens.spacingVerticalS,
    marginRight: '0px',
    paddingRight: tokens.spacingVerticalM,
  },
});

/**
 * Apply styling to the MessageBarActions slots based on the state
 */
export const useMessageBarActionsStyles_unstable = (state: MessageBarActionsState): MessageBarActionsState => {
  const rootBaseStyles = useRootBaseStyles();
  const containerActionBaseStyles = useContainerActionBaseStyles();
  const multilineStyles = useMultilineStyles();
  state.root.className = mergeClasses(
    messageBarActionsClassNames.root,
    rootBaseStyles,
    state.layout === 'multiline' && multilineStyles.root,
    state.root.className,
  );

  if (state.containerAction) {
    state.containerAction.className = mergeClasses(
      messageBarActionsClassNames.containerAction,
      containerActionBaseStyles,
      state.containerAction.className,
    );
  }

  return state;
};
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageBarActions renders a default state 1`] = `
<div>
  <div
    class="fui-MessageBarActions"
  >
    Default MessageBarActions
  </div>
</div>
`;
import { makeResetStyles, mergeClasses } from '@griffel/react';
import type { SlotClassNames } from '@fluentui/react-utilities';
import type { MessageBarBodySlots, MessageBarBodyState } from './MessageBarBody.types';
import { tokens, typographyStyles } from '@fluentui/react-theme';

export const messageBarBodyClassNames: SlotClassNames<MessageBarBodySlots> = {
  root: 'fui-MessageBarBody',
};

const useRootBaseStyles = makeResetStyles({
  ...typographyStyles.body1,
  gridArea: 'body',
  paddingRight: tokens.spacingHorizontalM,
});

/**
 * Apply styling to the MessageBarBody slots based on the state
 */
export const useMessageBarBodyStyles_unstable = (state: MessageBarBodyState): MessageBarBodyState => {
  const rootBaseStyles = useRootBaseStyles();
  state.root.className = mergeClasses(messageBarBodyClassNames.root, rootBaseStyles, state.root.className);

  return state;
};
import * as React from 'react';
import { getIntrinsicElementProps, slot, useMergedRefs } from '@fluentui/react-utilities';
import type { MessageBarBodyProps, MessageBarBodyState } from './MessageBarBody.types';
import { useMessageBarContext } from '../../contexts/messageBarContext';

/**
 * Create the state required to render MessageBarBody.
 *
 * The returned state can be modified with hooks such as useMessageBarBodyStyles_unstable,
 * before being passed to renderMessageBarBody_unstable.
 *
 * @param props - props from this instance of MessageBarBody
 * @param ref - reference to root HTMLElement of MessageBarBody
 */
export const useMessageBarBody_unstable = (
  props: MessageBarBodyProps,
  ref: React.Ref<HTMLDivElement>,
): MessageBarBodyState => {
  const { bodyRef } = useMessageBarContext();
  return {
    components: {
      root: 'div',
    },
    root: slot.always(
      getIntrinsicElementProps('div', {
        ref: useMergedRefs(ref, bodyRef),
        ...props,
      }),
      { elementType: 'div' },
    ),
  };
};
/** @jsxRuntime automatic */
/** @jsxImportSource @fluentui/react-jsx-runtime */

import { assertSlots } from '@fluentui/react-utilities';
import type { MessageBarBodyState, MessageBarBodySlots } from './MessageBarBody.types';

/**
 * Render the final JSX of MessageBarBody
 */
export const renderMessageBarBody_unstable = (state: MessageBarBodyState) => {
  assertSlots<MessageBarBodySlots>(state);

  return <state.root />;
};
import * as React from 'react';
import type { ForwardRefComponent } from '@fluentui/react-utilities';
import { useCustomStyleHook_unstable } from '@fluentui/react-shared-contexts';
import { useMessageBarBody_unstable } from './useMessageBarBody';
import { renderMessageBarBody_unstable } from './renderMessageBarBody';
import { useMessageBarBodyStyles_unstable } from './useMessageBarBodyStyles.styles';
import type { MessageBarBodyProps } from './MessageBarBody.types';

/**
 * MessageBarBody component
 */
export const MessageBarBody: ForwardRefComponent<MessageBarBodyProps> = React.forwardRef((props, ref) => {
  const state = useMessageBarBody_unstable(props, ref);

  useMessageBarBodyStyles_unstable(state);
  useCustomStyleHook_unstable('useMessageBarBodyStyles_unstable')(state);
  return renderMessageBarBody_unstable(state);
});

MessageBarBody.displayName = 'MessageBarBody';
import * as React from 'react';
import { render } from '@testing-library/react';
import { isConformant } from '../../testing/isConformant';
import { MessageBarBody } from './MessageBarBody';

describe('MessageBarBody', () => {
  isConformant({
    Component: MessageBarBody,
    displayName: 'MessageBarBody',
  });

  it('renders a default state', () => {
    const result = render(<MessageBarBody>Default MessageBarBody</MessageBarBody>);
    expect(result.container).toMatchSnapshot();
  });
});
export * from './MessageBarBody';
export * from './MessageBarBody.types';
export * from './renderMessageBarBody';
export * from './useMessageBarBody';
export * from './useMessageBarBodyStyles.styles';
import type { ComponentProps, ComponentState, Slot } from '@fluentui/react-utilities';

export type MessageBarBodySlots = {
  root: Slot<'div'>;
};

/**
 * MessageBarBody Props
 */
export type MessageBarBodyProps = ComponentProps<MessageBarBodySlots>;

/**
 * State used in rendering MessageBarBody
 */
export type MessageBarBodyState = ComponentState<MessageBarBodySlots>;
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageBarBody renders a default state 1`] = `
<div>
  <div
    class="fui-MessageBarBody"
  >
    Default MessageBarBody
  </div>
</div>
`;
import * as React from 'react';
import { MessageBarProps } from './MessageBar.types';
import { CheckmarkCircleFilled, InfoFilled, WarningFilled, ErrorCircleFilled } from '@fluentui/react-icons';

export function getIntentIcon(intent: MessageBarProps['intent']) {
  switch (intent) {
    case 'info':
      return <InfoFilled />;
    case 'warning':
      return <WarningFilled />;
    case 'error':
      return <ErrorCircleFilled />;
    case 'success':
      return <CheckmarkCircleFilled />;

    default:
      return null;
  }
}
import * as React from 'react';
import { MessageBarContextValues, MessageBarState } from './MessageBar.types';

export function useMessageBarContextValue_unstable(state: MessageBarState): MessageBarContextValues {
  const { layout, actionsRef, bodyRef, titleId } = state;

  const messageBarContext = React.useMemo(
    () => ({
      layout,
      actionsRef,
      bodyRef,
      titleId,
    }),
    [layout, actionsRef, bodyRef, titleId],
  );

  return {
    messageBar: messageBarContext,
  };
}
/** @jsxRuntime automatic */
/** @jsxImportSource @fluentui/react-jsx-runtime */

import { assertSlots } from '@fluentui/react-utilities';
import type { MessageBarState, MessageBarSlots, MessageBarContextValues } from './MessageBar.types';
import { MessageBarContextProvider } from '../../contexts/messageBarContext';

/**
 * Render the final JSX of MessageBar
 */
export const renderMessageBar_unstable = (state: MessageBarState, contexts: MessageBarContextValues) => {
  assertSlots<MessageBarSlots>(state);

  return (
    <MessageBarContextProvider value={contexts.messageBar}>
      <state.root>
        {state.icon && <state.icon />}
        {state.root.children}
        {state.bottomReflowSpacer && <state.bottomReflowSpacer />}
      </state.root>
    </MessageBarContextProvider>
  );
};
import * as React from 'react';
import type { ForwardRefComponent } from '@fluentui/react-utilities';
import { useCustomStyleHook_unstable } from '@fluentui/react-shared-contexts';
import { useMessageBar_unstable } from './useMessageBar';
import { renderMessageBar_unstable } from './renderMessageBar';
import { useMessageBarStyles_unstable } from './useMessageBarStyles.styles';
import type { MessageBarProps } from './MessageBar.types';
import { useMessageBarContextValue_unstable } from './useMessageBarContextValues';

/**
 * MessageBar component
 */
export const MessageBar: ForwardRefComponent<MessageBarProps> = React.forwardRef((props, ref) => {
  const state = useMessageBar_unstable(props, ref);

  useMessageBarStyles_unstable(state);
  useCustomStyleHook_unstable('useMessageBarStyles_unstable')(state);
  return renderMessageBar_unstable(state, useMessageBarContextValue_unstable(state));
});

MessageBar.displayName = 'MessageBar';
import * as React from 'react';
import { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';
import { isHTMLElement } from '@fluentui/react-utilities';

export function useMessageBarReflow(enabled: boolean = false) {
  const { targetDocument } = useFluent();
  const forceUpdate = React.useReducer(() => ({}), {})[1];
  const reflowingRef = React.useRef(false);
  const resizeObserverRef = React.useRef<ResizeObserver | null>(null);
  const prevInlineSizeRef = React.useRef(-1);

  const handleResize: ResizeObserverCallback = React.useCallback(
    entries => {
      // Resize observer is only owned by this component - one resize observer entry expected
      // No need to support multiple fragments - one border box entry expected
      if (process.env.NODE_ENV !== 'production' && entries.length > 1) {
        // eslint-disable-next-line no-console
        console.error(
          [
            'useMessageBarReflow: Resize observer should only have one entry. ',
            'If multiple entries are observed, the first entry will be used.',
            'This is a bug, please report it to the Fluent UI team.',
          ].join(' '),
        );
      }

      const entry = entries[0];
      const borderBoxSize = entry?.borderBoxSize[0];
      if (!borderBoxSize || !entry) {
        return;
      }

      const { inlineSize } = borderBoxSize;
      const { target } = entry;

      if (!isHTMLElement(target)) {
        return;
      }

      let nextReflowing: boolean | undefined;

      // No easy way to really determine when the single line layout will fit
      // Just keep try to set single line layout as long as the size is growing
      // Will cause flickering when size is being adjusted gradually (i.e. drag) - but this should not be a common case
      if (reflowingRef.current) {
        if (prevInlineSizeRef.current < inlineSize) {
          nextReflowing = false;
        }
      } else {
        const scrollWidth = target.scrollWidth;
        if (inlineSize < scrollWidth) {
          nextReflowing = true;
        }
      }

      prevInlineSizeRef.current = inlineSize;
      if (typeof nextReflowing !== 'undefined' && reflowingRef.current !== nextReflowing) {
        reflowingRef.current = nextReflowing;
        forceUpdate();
      }
    },
    [forceUpdate],
  );

  const ref = React.useCallback(
    (el: HTMLElement | null) => {
      if (!enabled || !el || !targetDocument?.defaultView) {
        return;
      }

      resizeObserverRef.current?.disconnect();

      const win = targetDocument.defaultView;
      const resizeObserver = new win.ResizeObserver(handleResize);
      resizeObserverRef.current = resizeObserver;
      resizeObserver.observe(el, { box: 'border-box' });
    },
    [targetDocument, handleResize, enabled],
  );

  React.useEffect(() => {
    return () => {
      resizeObserverRef.current?.disconnect();
    };
  }, []);

  return { ref, reflowing: reflowingRef.current };
}
import * as React from 'react';
import { getIntrinsicElementProps, slot, useId, useMergedRefs } from '@fluentui/react-utilities';
import { useAnnounce_unstable } from '@fluentui/react-shared-contexts';
import type { MessageBarProps, MessageBarState } from './MessageBar.types';
import { getIntentIcon } from './getIntentIcon';
import { useMessageBarReflow } from './useMessageBarReflow';
import { useMessageBarTransitionContext } from '../../contexts/messageBarTransitionContext';

/**
 * Create the state required to render MessageBar.
 *
 * The returned state can be modified with hooks such as useMessageBarStyles_unstable,
 * before being passed to renderMessageBar_unstable.
 *
 * @param props - props from this instance of MessageBar
 * @param ref - reference to root HTMLElement of MessageBar
 */
export const useMessageBar_unstable = (props: MessageBarProps, ref: React.Ref<HTMLDivElement>): MessageBarState => {
  const { layout = 'auto', intent = 'info', politeness, shape = 'rounded' } = props;
  const computedPoliteness = politeness ?? intent === 'info' ? 'polite' : 'assertive';
  const autoReflow = layout === 'auto';
  const { ref: reflowRef, reflowing } = useMessageBarReflow(autoReflow);
  const computedLayout = autoReflow ? (reflowing ? 'multiline' : 'singleline') : layout;
  const { className: transitionClassName, nodeRef } = useMessageBarTransitionContext();
  const actionsRef = React.useRef<HTMLDivElement | null>(null);
  const bodyRef = React.useRef<HTMLDivElement | null>(null);
  const { announce } = useAnnounce_unstable();
  const titleId = useId();

  React.useEffect(() => {
    const bodyMessage = bodyRef.current?.textContent;
    const actionsMessage = actionsRef.current?.textContent;

    const message = [bodyMessage, actionsMessage].filter(Boolean).join(',');
    announce(message, { polite: computedPoliteness === 'polite', alert: computedPoliteness === 'assertive' });
  }, [bodyRef, actionsRef, announce, computedPoliteness]);

  return {
    components: {
      root: 'div',
      icon: 'div',
      bottomReflowSpacer: 'div',
    },
    root: slot.always(
      getIntrinsicElementProps('div', {
        ref: useMergedRefs(ref, reflowRef, nodeRef),
        role: 'group',
        'aria-labelledby': titleId,
        ...props,
      }),
      { elementType: 'div' },
    ),

    icon: slot.optional(props.icon, {
      renderByDefault: true,
      elementType: 'div',
      defaultProps: { children: getIntentIcon(intent) },
    }),
    bottomReflowSpacer: slot.optional(props.bottomReflowSpacer, {
      renderByDefault: computedLayout === 'multiline',
      elementType: 'div',
    }),
    layout: computedLayout,
    intent,
    transitionClassName,
    actionsRef,
    bodyRef,
    titleId,
    shape,
  };
};
import { makeResetStyles, makeStyles, mergeClasses, shorthands } from '@griffel/react';
import { tokens } from '@fluentui/react-theme';
import type { SlotClassNames } from '@fluentui/react-utilities';
import type { MessageBarSlots, MessageBarState } from './MessageBar.types';

export const messageBarClassNames: SlotClassNames<MessageBarSlots> = {
  root: 'fui-MessageBar',
  icon: 'fui-MessageBar__icon',
  bottomReflowSpacer: 'fui-MessageBar__bottomReflowSpacer',
};

const useRootBaseStyles = makeResetStyles({
  whiteSpace: 'nowrap',
  display: 'grid',
  gridTemplateColumns: 'auto 1fr auto auto',
  gridTemplateRows: '1fr',
  gridTemplateAreas: '"icon body secondaryActions actions"',
  paddingLeft: tokens.spacingHorizontalM,
  border: `${tokens.strokeWidthThin} solid ${tokens.colorNeutralStroke1}`,
  borderRadius: tokens.borderRadiusMedium,
  alignItems: 'center',
  minHeight: '36px',
  boxSizing: 'border-box',
  backgroundColor: tokens.colorNeutralBackground3,
});

const useIconBaseStyles = makeResetStyles({
  gridArea: 'icon',
  fontSize: tokens.fontSizeBase500,
  marginRight: tokens.spacingHorizontalS,
  color: tokens.colorNeutralForeground3,
  display: 'flex',
  alignItems: 'center',
});

const useReflowSpacerBaseStyles = makeResetStyles({
  marginBottom: tokens.spacingVerticalS,
  gridArea: 'secondaryActions',
});

const useStyles = makeStyles({
  rootMultiline: {
    whiteSpace: 'normal',
    alignItems: 'start',
    paddingTop: tokens.spacingVerticalMNudge,
    gridTemplateColumns: 'auto 1fr auto',
    gridTemplateAreas: `
      "icon body actions"
      "secondaryActions secondaryActions secondaryActions"
    `,
  },

  secondaryActionsMultiline: {
    justifyContent: 'end',
    marginTop: tokens.spacingVerticalMNudge,
    marginBottom: tokens.spacingVerticalS,
    marginRight: '0px',
  },

  square: {
    ...shorthands.borderRadius(0),
  },
});

const useIconIntentStyles = makeStyles({
  info: {
    /** already in base reset styles */
  },
  error: {
    color: tokens.colorStatusDangerForeground1,
  },
  warning: {
    color: tokens.colorStatusWarningForeground3,
  },
  success: {
    color: tokens.colorStatusSuccessForeground1,
  },
});

const useRootIntentStyles = makeStyles({
  info: {
    /** already in base reset styles */
  },
  error: {
    backgroundColor: tokens.colorStatusDangerBackground1,
    ...shorthands.borderColor(tokens.colorStatusDangerBorder1),
  },
  warning: {
    backgroundColor: tokens.colorStatusWarningBackground1,
    ...shorthands.borderColor(tokens.colorStatusWarningBorder1),
  },
  success: {
    backgroundColor: tokens.colorStatusSuccessBackground1,
    ...shorthands.borderColor(tokens.colorStatusSuccessBorder1),
  },
});

/**
 * Apply styling to the MessageBar slots based on the state
 */
export const useMessageBarStyles_unstable = (state: MessageBarState): MessageBarState => {
  const rootBaseStyles = useRootBaseStyles();
  const iconBaseStyles = useIconBaseStyles();
  const iconIntentStyles = useIconIntentStyles();
  const rootIntentStyles = useRootIntentStyles();
  const reflowSpacerStyles = useReflowSpacerBaseStyles();
  const styles = useStyles();

  state.root.className = mergeClasses(
    messageBarClassNames.root,
    rootBaseStyles,
    state.layout === 'multiline' && styles.rootMultiline,
    state.shape === 'square' && styles.square,
    rootIntentStyles[state.intent],
    state.transitionClassName,
    state.root.className,
  );

  if (state.icon) {
    state.icon.className = mergeClasses(
      messageBarClassNames.icon,
      iconBaseStyles,
      iconIntentStyles[state.intent],
      state.icon.className,
    );
  }

  if (state.bottomReflowSpacer) {
    state.bottomReflowSpacer.className = mergeClasses(messageBarClassNames.bottomReflowSpacer, reflowSpacerStyles);
  }

  return state;
};
export * from './MessageBar';
export * from './MessageBar.types';
export * from './renderMessageBar';
export * from './useMessageBar';
export * from './useMessageBarStyles.styles';
export * from './useMessageBarContextValues';
import * as React from 'react';
import { render } from '@testing-library/react';
import { isConformant } from '../../testing/isConformant';
import { MessageBar } from './MessageBar';
import { AnnounceProvider_unstable } from '@fluentui/react-shared-contexts';
import { MessageBarBody } from '../MessageBarBody/MessageBarBody';
import { MessageBarTitle } from '../MessageBarTitle/MessageBarTitle';
import { MessageBarActions } from '../MessageBarActions/MessageBarActions';
import { resetIdsForTests } from '@fluentui/react-utilities';
import { MessageBarProps } from './MessageBar.types';

describe('MessageBar', () => {
  beforeAll(() => {
    // https://github.com/jsdom/jsdom/issues/3368
    global.ResizeObserver = class ResizeObserver {
      public observe() {
        // do nothing
      }
      public unobserve() {
        // do nothing
      }
      public disconnect() {
        // do nothing
      }
    };
  });

  beforeEach(() => {
    resetIdsForTests();
  });

  isConformant<MessageBarProps>({
    Component: MessageBar,
    displayName: 'MessageBar',
    testOptions: {
      'has-static-classnames': [
        {
          props: {
            icon: 'Icon',
            layout: 'multiline',
          },
        },
      ],
    },
  });

  it('renders a default state', () => {
    const result = render(<MessageBar>Default MessageBar</MessageBar>);
    expect(result.container).toMatchSnapshot();
  });

  it.each([
    ['assertive', 'error'] as const,
    ['assertive', 'warning'] as const,
    ['assertive', 'success'] as const,
    ['polite', 'info'] as const,
  ])('should announce %s with %s intent', (politeness, intent) => {
    const announce = jest.fn();
    render(
      <AnnounceProvider_unstable value={{ announce }}>
        <MessageBar intent={intent}>
          <MessageBarBody>
            <MessageBarTitle>Title</MessageBarTitle>Body
          </MessageBarBody>
        </MessageBar>
      </AnnounceProvider_unstable>,
    );

    expect(announce).toHaveBeenCalledTimes(1);
    expect(announce).toHaveBeenCalledWith('TitleBody', {
      alert: politeness === 'assertive',
      polite: politeness === 'polite',
    });
  });

  it('should announce actions', () => {
    const announce = jest.fn();
    render(
      <AnnounceProvider_unstable value={{ announce }}>
        <MessageBar>
          <MessageBarBody>
            <MessageBarTitle>Title</MessageBarTitle>Body
          </MessageBarBody>
          <MessageBarActions containerAction={<button>Container action</button>}>
            <button>Action 1</button>
            <button>Action 2</button>
          </MessageBarActions>
        </MessageBar>
      </AnnounceProvider_unstable>,
    );

    expect(announce).toHaveBeenCalledTimes(1);
    expect(announce).toHaveBeenCalledWith('TitleBody,Action 1Action 2', expect.anything());
  });
});
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageBar renders a default state 1`] = `
<div>
  <div
    aria-labelledby="fui-1"
    class="fui-MessageBar"
    role="group"
  >
    <div
      class="fui-MessageBar__icon"
    >
      <svg
        aria-hidden="true"
        class=""
        fill="currentColor"
        height="1em"
        viewBox="0 0 20 20"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M18 10a8 8 0 1 0-16 0 8 8 0 0 0 16 0ZM9.5 8.91a.5.5 0 0 1 1 0V13.6a.5.5 0 0 1-1 0V8.9Zm-.25-2.16a.75.75 0 1 1 1.5 0 .75.75 0 0 1-1.5 0Z"
          fill="currentColor"
        />
      </svg>
    </div>
    Default MessageBar
  </div>
</div>
`;
import type { ComponentProps, ComponentState, Slot } from '@fluentui/react-utilities';
import type { MessageBarContextValue } from '../../contexts/messageBarContext';

export type MessageBarSlots = {
  root: Slot<'div'>;
  icon?: Slot<'div'>;
  /**
   * Rendered when the component is in multiline layout to guarantee correct spacing even
   * if no actions are rendered. When actions are rendered, the default actions grid area will render
   * over this element
   *
   * NOTE: If you are using this slot, this probably means that you are using the MessageBar without
   * actions, this is not recommended from an accesibility point of view
   */
  bottomReflowSpacer?: Slot<'div'>;
};

export type MessageBarContextValues = {
  messageBar: MessageBarContextValue;
};

export type MessageBarIntent = 'info' | 'success' | 'warning' | 'error';

/**
 * MessageBar Props
 */
export type MessageBarProps = ComponentProps<MessageBarSlots> &
  Pick<Partial<MessageBarContextValue>, 'layout'> & {
    /**
     * Default designs announcement presets
     * @default info
     */
    intent?: MessageBarIntent;
    /**
     * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions
     */
    politeness?: 'assertive' | 'polite';
    /**
     * Use squal for page level messages and rounded for component level messages
     * @default rounded
     */
    shape?: 'square' | 'rounded';
  };

/**
 * State used in rendering MessageBar
 */
export type MessageBarState = ComponentState<MessageBarSlots> &
  Required<Pick<MessageBarProps, 'layout' | 'intent' | 'shape'>> &
  Pick<MessageBarContextValue, 'actionsRef' | 'bodyRef' | 'titleId'> & {
    transitionClassName: string;
  };
import { makeStyles, mergeClasses } from '@griffel/react';
import { tokens } from '@fluentui/react-theme';
import type { SlotClassNames } from '@fluentui/react-utilities';
import type { MessageBarGroupSlots, MessageBarGroupState } from './MessageBarGroup.types';

export const messageBarGroupClassNames: SlotClassNames<MessageBarGroupSlots> = {
  root: 'fui-MessageBarGroup',
};

/**
 * Styles for the root slot
 */
const useStyles = makeStyles({
  base: {
    animationFillMode: 'forwards',
    animationDuration: tokens.durationNormal,
  },

  enter: {
    animationName: {
      from: {
        opacity: 0,
        transform: 'translateY(-100%)',
      },
      to: {
        opacity: 1,
        transform: 'translateY(0)',
      },
    },
  },

  exit: {
    animationName: {
      from: {
        opacity: 1,
      },
      to: {
        opacity: 0,
      },
    },
  },
});

/**
 * Apply styling to the MessageBarGroup slots based on the state
 */
export const useMessageBarGroupStyles_unstable = (state: MessageBarGroupState): MessageBarGroupState => {
  const styles = useStyles();
  state.root.className = mergeClasses(messageBarGroupClassNames.root, state.root.className);
  state.enterStyles = mergeClasses(styles.base, styles.enter);
  state.exitStyles = mergeClasses(styles.base, styles.exit);
  return state;
};
import * as React from 'react';
import type { MessageBarGroupProps, MessageBarGroupState } from './MessageBarGroup.types';
import { getIntrinsicElementProps, slot } from '@fluentui/react-utilities';

/**
 * Create the state required to render MessageBarGroup.
 *
 * The returned state can be modified with hooks such as useMessageBarGroupStyles_unstable,
 * before being passed to renderMessageBarGroup_unstable.
 *
 * @param props - props from this instance of MessageBarGroup
 * @param ref - reference to root HTMLElement of MessageBarGroup
 */
export const useMessageBarGroup_unstable = (
  props: MessageBarGroupProps,
  ref: React.Ref<HTMLDivElement>,
): MessageBarGroupState => {
  if (process.env.NODE_ENV !== 'production') {
    React.Children.forEach(props.children, c => {
      if (!React.isValidElement(c) || c.type === React.Fragment) {
        throw new Error(
          "MessageBarGroup: children must be valid MessageBar components. Please ensure you're not using fragments. ",
        );
      }
    });
  }

  const children = React.Children.map(props.children ?? [], c =>
    React.isValidElement(c) && c.type !== React.Fragment ? c : null,
  ).filter(Boolean);

  return {
    components: {
      root: 'div',
    },

    root: slot.always(
      getIntrinsicElementProps('div', {
        ref,
        ...props,
      }),
      { elementType: 'div' },
    ),
    children,
    animate: props.animate ?? 'exit-only',
    enterStyles: '',
    exitStyles: '',
  };
};
/** @jsxRuntime automatic */
/** @jsxImportSource @fluentui/react-jsx-runtime */

import { assertSlots } from '@fluentui/react-utilities';
import type { MessageBarGroupState, MessageBarGroupSlots } from './MessageBarGroup.types';
import { TransitionGroup } from 'react-transition-group';
import { MessageBarTransition } from './MessageBarTransition';

/**
 * Render the final JSX of MessageBarGroup
 */
export const renderMessageBarGroup_unstable = (state: MessageBarGroupState) => {
  assertSlots<MessageBarGroupSlots>(state);

  return (
    <state.root>
      <TransitionGroup component={null}>
        {state.children.map(child => (
          <MessageBarTransition
            animate={state.animate}
            key={child.key}
            enterClassName={state.enterStyles}
            exitClassName={state.exitStyles}
          >
            {child}
          </MessageBarTransition>
        ))}
      </TransitionGroup>
    </state.root>
  );
};
export * from './MessageBarGroup';
export * from './MessageBarGroup.types';
export * from './renderMessageBarGroup';
export * from './useMessageBarGroup';
export * from './useMessageBarGroupStyles.styles';
import * as React from 'react';
import type { ForwardRefComponent } from '@fluentui/react-utilities';
import { useCustomStyleHook_unstable } from '@fluentui/react-shared-contexts';
import { useMessageBarGroup_unstable } from './useMessageBarGroup';
import { renderMessageBarGroup_unstable } from './renderMessageBarGroup';
import { useMessageBarGroupStyles_unstable } from './useMessageBarGroupStyles.styles';
import type { MessageBarGroupProps } from './MessageBarGroup.types';

/**
 * MessageBarGroup component
 */
export const MessageBarGroup: ForwardRefComponent<MessageBarGroupProps> = React.forwardRef((props, ref) => {
  const state = useMessageBarGroup_unstable(props, ref);

  useMessageBarGroupStyles_unstable(state);
  useCustomStyleHook_unstable('useMessageBarGroupStyles_unstable')(state);
  return renderMessageBarGroup_unstable(state);
});

MessageBarGroup.displayName = 'MessageBarGroup';
import type { ComponentProps, ComponentState, Slot } from '@fluentui/react-utilities';
import * as React from 'react';

export type MessageBarGroupSlots = {
  root: Slot<'div'>;
};

/**
 * MessageBarGroup Props
 */
export type MessageBarGroupProps = ComponentProps<MessageBarGroupSlots> & {
  children: React.ReactElement[] | React.ReactElement;
  animate?: 'exit-only' | 'both';
};

/**
 * State used in rendering MessageBarGroup
 */
export type MessageBarGroupState = ComponentState<MessageBarGroupSlots> &
  Pick<MessageBarGroupProps, 'animate'> & {
    enterStyles: string;
    exitStyles: string;
    children: React.ReactElement[];
  };
import * as React from 'react';
import { render } from '@testing-library/react';
import { isConformant } from '../../testing/isConformant';
import { MessageBarGroup } from './MessageBarGroup';

describe('MessageBarGroup', () => {
  isConformant({
    Component: MessageBarGroup,
    displayName: 'MessageBarGroup',
  });

  // TODO add more tests here, and create visual regression tests in /apps/vr-tests

  it('renders a default state', () => {
    const result = render(
      <MessageBarGroup>
        <span>Default MessageBarGroup</span>
      </MessageBarGroup>,
    );
    expect(result.container).toMatchSnapshot();
  });
});
import * as React from 'react';
import { Transition, TransitionStatus } from 'react-transition-group';
import { MessageBarTransitionContextProvider } from '../../contexts/messageBarTransitionContext';
import { MessageBarGroupProps } from './MessageBarGroup.types';

const getClassName = (
  status: TransitionStatus,
  enterClassName: string,
  exitClassName: string,
  animate: MessageBarGroupProps['animate'],
) => {
  switch (status) {
    case 'entering':
    case 'entered':
      return animate === 'both' ? enterClassName : '';
    case 'exiting':
    case 'exited':
      return exitClassName;
    default:
      return '';
  }
};

/**
 * Internal component that controls the animation transition for MessageBar components
 * @internal
 */
export const MessageBarTransition: React.FC<{
  children: React.ReactElement;
  enterClassName: string;
  exitClassName: string;
  animate: MessageBarGroupProps['animate'];
}> = ({ children, enterClassName, exitClassName, animate, ...rest }) => {
  const nodeRef = React.useRef<HTMLDivElement>(null);

  return (
    <Transition timeout={250} nodeRef={nodeRef} {...rest}>
      {state => (
        <MessageBarTransitionInner
          animate={animate}
          enterClassName={enterClassName}
          exitClassName={exitClassName}
          nodeRef={nodeRef}
          state={state}
        >
          {children}
        </MessageBarTransitionInner>
      )}
    </Transition>
  );
};

const MessageBarTransitionInner: React.FC<{
  children: React.ReactElement;
  enterClassName: string;
  exitClassName: string;
  animate: MessageBarGroupProps['animate'];
  nodeRef: React.Ref<HTMLDivElement | null>;
  state: TransitionStatus;
}> = ({ children, state, enterClassName, exitClassName, animate, nodeRef }) => {
  const className = getClassName(state, enterClassName, exitClassName, animate);
  const context = React.useMemo(
    () => ({
      className,
      nodeRef,
    }),
    [className, nodeRef],
  );

  return <MessageBarTransitionContextProvider value={context}>{children}</MessageBarTransitionContextProvider>;
};
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageBarGroup renders a default state 1`] = `
<div>
  <div
    class="fui-MessageBarGroup"
  >
    <span>
      Default MessageBarGroup
    </span>
  </div>
</div>
`;
export * from './components/MessageBarActions/index';
export {
  MessageBar,
  useMessageBarStyles_unstable,
  useMessageBar_unstable,
  useMessageBarContextValue_unstable,
  renderMessageBar_unstable,
  messageBarClassNames,
} from './MessageBar';

export type { MessageBarProps, MessageBarSlots, MessageBarState, MessageBarIntent } from './MessageBar';

export {
  MessageBarTitle,
  useMessageBarTitleStyles_unstable,
  useMessageBarTitle_unstable,
  renderMessageBarTitle_unstable,
  messageBarTitleClassNames,
} from './MessageBarTitle';

export type { MessageBarTitleProps, MessageBarTitleSlots, MessageBarTitleState } from './MessageBarTitle';

export {
  MessageBarActions,
  useMessageBarActionsStyles_unstable,
  useMessageBarActions_unstable,
  renderMessageBarActions_unstable,
  useMessageBarActionsContextValue_unstable,
  messageBarActionsClassNames,
} from './MessageBarActions';

export type { MessageBarActionsProps, MessageBarActionsSlots, MessageBarActionsState } from './MessageBarActions';

export {
  MessageBarBody,
  useMessageBarBodyStyles_unstable,
  useMessageBarBody_unstable,
  renderMessageBarBody_unstable,
  messageBarBodyClassNames,
} from './MessageBarBody';

export type { MessageBarBodyProps, MessageBarBodySlots, MessageBarBodyState } from './MessageBarBody';

export {
  MessageBarContextProvider,
  messageBarContextDefaultValue,
  messageBarTransitionContextDefaultValue,
  useMessageBarContext,
  MessageBarTransitionContextProvider,
  useMessageBarTransitionContext,
} from './contexts';
export type { MessageBarContextValue, MessageBarTransitionContextValue } from './contexts';
export {
  MessageBarGroup,
  useMessageBarGroupStyles_unstable,
  useMessageBarGroup_unstable,
  renderMessageBarGroup_unstable,
  messageBarGroupClassNames,
} from './MessageBarGroup';

export type { MessageBarGroupProps, MessageBarGroupSlots, MessageBarGroupState } from './MessageBarGroup';
export * from './components/MessageBarTitle/index';
export * from './components/MessageBarBody/index';
