diff --git a/node_modules/@griffel/react/__resetStyles.cjs.js b/node_modules/@griffel/react/__resetStyles.cjs.js
new file mode 100644
index 0000000..4f14ef9
--- /dev/null
+++ b/node_modules/@griffel/react/__resetStyles.cjs.js
@@ -0,0 +1,29 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var core = require('@griffel/core');
+var RendererContext = require('./RendererContext.cjs.js');
+var TextDirectionContext = require('./TextDirectionContext.cjs.js');
+
+/**
+ * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.
+ *
+ * @internal
+ */
+// eslint-disable-next-line @typescript-eslint/naming-convention
+
+function __resetStyles(ltrClassName, rtlClassName, cssRules) {
+  const getStyles = core.unstable__resetStyles(ltrClassName, rtlClassName, cssRules);
+  return function useClasses() {
+    const dir = TextDirectionContext.useTextDirection();
+    const renderer = RendererContext.useRenderer();
+    return getStyles({
+      dir,
+      renderer
+    });
+  };
+}
+
+exports.__resetStyles = __resetStyles;
+//# sourceMappingURL=__resetStyles.cjs.js.map
diff --git a/node_modules/@griffel/react/__resetStyles.d.ts b/node_modules/@griffel/react/__resetStyles.d.ts
new file mode 100644
index 0000000..a4af3bb
--- /dev/null
+++ b/node_modules/@griffel/react/__resetStyles.d.ts
@@ -0,0 +1,6 @@
+/**
+ * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.
+ *
+ * @internal
+ */
+export declare function __resetStyles(ltrClassName: string, rtlClassName: string | null, cssRules: string[]): () => string;
diff --git a/node_modules/@griffel/react/__resetStyles.esm.js b/node_modules/@griffel/react/__resetStyles.esm.js
new file mode 100644
index 0000000..2d4f316
--- /dev/null
+++ b/node_modules/@griffel/react/__resetStyles.esm.js
@@ -0,0 +1,25 @@
+import { unstable__resetStyles } from '@griffel/core';
+import { useRenderer } from './RendererContext.esm.js';
+import { useTextDirection } from './TextDirectionContext.esm.js';
+
+/**
+ * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.
+ *
+ * @internal
+ */
+// eslint-disable-next-line @typescript-eslint/naming-convention
+
+function __resetStyles(ltrClassName, rtlClassName, cssRules) {
+  const getStyles = unstable__resetStyles(ltrClassName, rtlClassName, cssRules);
+  return function useClasses() {
+    const dir = useTextDirection();
+    const renderer = useRenderer();
+    return getStyles({
+      dir,
+      renderer
+    });
+  };
+}
+
+export { __resetStyles };
+//# sourceMappingURL=__resetStyles.esm.js.map
diff --git a/node_modules/@griffel/react/index.cjs.js b/node_modules/@griffel/react/index.cjs.js
index dade80f..779a5de 100644
--- a/node_modules/@griffel/react/index.cjs.js
+++ b/node_modules/@griffel/react/index.cjs.js
@@ -4,12 +4,14 @@ Object.defineProperty(exports, '__esModule', { value: true });
 
 var core = require('@griffel/core');
 var makeStyles = require('./makeStyles.cjs.js');
+var makeResetStyles = require('./makeResetStyles.cjs.js');
 var makeStaticStyles = require('./makeStaticStyles.cjs.js');
 var renderToStyleElements = require('./renderToStyleElements.cjs.js');
 var RendererContext = require('./RendererContext.cjs.js');
 var TextDirectionContext = require('./TextDirectionContext.cjs.js');
 var __css = require('./__css.cjs.js');
 var __styles = require('./__styles.cjs.js');
+var __resetStyles = require('./__resetStyles.cjs.js');
 
 
 
@@ -26,6 +28,7 @@ Object.defineProperty(exports, 'shorthands', {
 	get: function () { return core.shorthands; }
 });
 exports.makeStyles = makeStyles.makeStyles;
+exports.unstableMakeResetStyles = makeResetStyles.makeResetStyles;
 exports.makeStaticStyles = makeStaticStyles.makeStaticStyles;
 exports.renderToStyleElements = renderToStyleElements.renderToStyleElements;
 exports.RendererProvider = RendererContext.RendererProvider;
@@ -33,4 +36,5 @@ exports.useRenderer_unstable = RendererContext.useRenderer;
 exports.TextDirectionProvider = TextDirectionContext.TextDirectionProvider;
 exports.__css = __css.__css;
 exports.__styles = __styles.__styles;
+exports.unstable__resetStyles = __resetStyles.__resetStyles;
 //# sourceMappingURL=index.cjs.js.map
diff --git a/node_modules/@griffel/react/index.d.ts b/node_modules/@griffel/react/index.d.ts
index db3c284..b9449a9 100644
--- a/node_modules/@griffel/react/index.d.ts
+++ b/node_modules/@griffel/react/index.d.ts
@@ -1,9 +1,11 @@
 export { shorthands, mergeClasses, createDOMRenderer } from '@griffel/core';
 export type { GriffelStyle, CreateDOMRendererOptions, GriffelRenderer } from '@griffel/core';
 export { makeStyles } from './makeStyles';
+export { makeResetStyles as unstableMakeResetStyles } from './makeResetStyles';
 export { makeStaticStyles } from './makeStaticStyles';
 export { renderToStyleElements } from './renderToStyleElements';
 export { RendererProvider, useRenderer as useRenderer_unstable } from './RendererContext';
 export { TextDirectionProvider } from './TextDirectionContext';
 export { __css } from './__css';
 export { __styles } from './__styles';
+export { __resetStyles as unstable__resetStyles } from './__resetStyles';
diff --git a/node_modules/@griffel/react/index.esm.js b/node_modules/@griffel/react/index.esm.js
index 04f8324..9500628 100644
--- a/node_modules/@griffel/react/index.esm.js
+++ b/node_modules/@griffel/react/index.esm.js
@@ -1,9 +1,11 @@
 export { createDOMRenderer, mergeClasses, shorthands } from '@griffel/core';
 export { makeStyles } from './makeStyles.esm.js';
+export { makeResetStyles as unstableMakeResetStyles } from './makeResetStyles.esm.js';
 export { makeStaticStyles } from './makeStaticStyles.esm.js';
 export { renderToStyleElements } from './renderToStyleElements.esm.js';
 export { RendererProvider, useRenderer as useRenderer_unstable } from './RendererContext.esm.js';
 export { TextDirectionProvider } from './TextDirectionContext.esm.js';
 export { __css } from './__css.esm.js';
 export { __styles } from './__styles.esm.js';
+export { __resetStyles as unstable__resetStyles } from './__resetStyles.esm.js';
 //# sourceMappingURL=index.esm.js.map
diff --git a/node_modules/@griffel/react/makeResetStyles.cjs.js b/node_modules/@griffel/react/makeResetStyles.cjs.js
new file mode 100644
index 0000000..f99b06b
--- /dev/null
+++ b/node_modules/@griffel/react/makeResetStyles.cjs.js
@@ -0,0 +1,30 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var core = require('@griffel/core');
+var makeStyles = require('./makeStyles.cjs.js');
+var RendererContext = require('./RendererContext.cjs.js');
+var TextDirectionContext = require('./TextDirectionContext.cjs.js');
+
+function makeResetStyles(styles) {
+  const getStyles = core.unstableMakeResetStyles(styles);
+
+  if (process.env.NODE_ENV !== 'production') {
+    if (makeStyles.isInsideComponent()) {
+      throw new Error(["makeResetStyles(): this function cannot be called in component's scope.", 'All makeResetStyles() calls should be top level i.e. in a root scope of a file.'].join(' '));
+    }
+  }
+
+  return function useClassName() {
+    const dir = TextDirectionContext.useTextDirection();
+    const renderer = RendererContext.useRenderer();
+    return getStyles({
+      dir,
+      renderer
+    });
+  };
+}
+
+exports.makeResetStyles = makeResetStyles;
+//# sourceMappingURL=makeResetStyles.cjs.js.map
diff --git a/node_modules/@griffel/react/makeResetStyles.d.ts b/node_modules/@griffel/react/makeResetStyles.d.ts
new file mode 100644
index 0000000..9901308
--- /dev/null
+++ b/node_modules/@griffel/react/makeResetStyles.d.ts
@@ -0,0 +1,2 @@
+import type { GriffelStyle } from '@griffel/core';
+export declare function makeResetStyles(styles: GriffelStyle): () => string;
diff --git a/node_modules/@griffel/react/makeResetStyles.esm.js b/node_modules/@griffel/react/makeResetStyles.esm.js
new file mode 100644
index 0000000..d9e66fc
--- /dev/null
+++ b/node_modules/@griffel/react/makeResetStyles.esm.js
@@ -0,0 +1,26 @@
+import { unstableMakeResetStyles } from '@griffel/core';
+import { isInsideComponent } from './makeStyles.esm.js';
+import { useRenderer } from './RendererContext.esm.js';
+import { useTextDirection } from './TextDirectionContext.esm.js';
+
+function makeResetStyles(styles) {
+  const getStyles = unstableMakeResetStyles(styles);
+
+  if (process.env.NODE_ENV !== 'production') {
+    if (isInsideComponent()) {
+      throw new Error(["makeResetStyles(): this function cannot be called in component's scope.", 'All makeResetStyles() calls should be top level i.e. in a root scope of a file.'].join(' '));
+    }
+  }
+
+  return function useClassName() {
+    const dir = useTextDirection();
+    const renderer = useRenderer();
+    return getStyles({
+      dir,
+      renderer
+    });
+  };
+}
+
+export { makeResetStyles };
+//# sourceMappingURL=makeResetStyles.esm.js.map
diff --git a/node_modules/@griffel/react/makeStyles.cjs.js b/node_modules/@griffel/react/makeStyles.cjs.js
index 1a403d3..ad5818b 100644
--- a/node_modules/@griffel/react/makeStyles.cjs.js
+++ b/node_modules/@griffel/react/makeStyles.cjs.js
@@ -46,7 +46,6 @@ function isInsideComponent() {
     return false;
   }
 }
-
 function makeStyles(stylesBySlots) {
   const getStyles = core.makeStyles(stylesBySlots);
 
@@ -66,5 +65,6 @@ function makeStyles(stylesBySlots) {
   };
 }
 
+exports.isInsideComponent = isInsideComponent;
 exports.makeStyles = makeStyles;
 //# sourceMappingURL=makeStyles.cjs.js.map
diff --git a/node_modules/@griffel/react/makeStyles.d.ts b/node_modules/@griffel/react/makeStyles.d.ts
index 585056e..40ac648 100644
--- a/node_modules/@griffel/react/makeStyles.d.ts
+++ b/node_modules/@griffel/react/makeStyles.d.ts
@@ -1,2 +1,3 @@
 import type { GriffelStyle } from '@griffel/core';
+export declare function isInsideComponent(): boolean;
 export declare function makeStyles<Slots extends string | number>(stylesBySlots: Record<Slots, GriffelStyle>): () => Record<Slots, string>;
diff --git a/node_modules/@griffel/react/makeStyles.esm.js b/node_modules/@griffel/react/makeStyles.esm.js
index 3bec168..083ed55 100644
--- a/node_modules/@griffel/react/makeStyles.esm.js
+++ b/node_modules/@griffel/react/makeStyles.esm.js
@@ -22,7 +22,6 @@ function isInsideComponent() {
     return false;
   }
 }
-
 function makeStyles(stylesBySlots) {
   const getStyles = makeStyles$1(stylesBySlots);
 
@@ -42,5 +41,5 @@ function makeStyles(stylesBySlots) {
   };
 }
 
-export { makeStyles };
+export { isInsideComponent, makeStyles };
 //# sourceMappingURL=makeStyles.esm.js.map
