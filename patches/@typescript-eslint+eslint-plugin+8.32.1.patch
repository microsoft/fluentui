diff --git a/node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-deprecated.js b/node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-deprecated.js
index 80f8f64..b3331d6 100644
--- a/node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-deprecated.js
+++ b/node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-deprecated.js
@@ -90,19 +90,26 @@ exports.default = (0, util_1.createRule)({
                     ? getJsDocDeprecation(symbol)
                     : undefined;
             }
+            const seen = new Set();
             const targetSymbol = checker.getAliasedSymbol(symbol);
-            while (tsutils.isSymbolFlagSet(symbol, ts.SymbolFlags.Alias)) {
-                const reason = getJsDocDeprecation(symbol);
+            let current = symbol;
+            while (tsutils.isSymbolFlagSet(current, ts.SymbolFlags.Alias)) {
+                if (seen.has(current)) {
+                    break;
+                }
+                seen.add(current);
+                const reason = getJsDocDeprecation(current);
                 if (reason != null) {
                     return reason;
                 }
-                const immediateAliasedSymbol = symbol.getDeclarations() && checker.getImmediateAliasedSymbol(symbol);
-                if (!immediateAliasedSymbol) {
+                const nextAlias = current.getDeclarations() &&
+                    checker.getImmediateAliasedSymbol(current);
+                if (!nextAlias) {
                     break;
                 }
-                symbol = immediateAliasedSymbol;
-                if (checkDeprecationsOfAliasedSymbol && symbol === targetSymbol) {
-                    return getJsDocDeprecation(symbol);
+                current = nextAlias;
+                if (checkDeprecationsOfAliasedSymbol && current === targetSymbol) {
+                    return getJsDocDeprecation(current);
                 }
             }
             return undefined;
@@ -153,21 +160,22 @@ exports.default = (0, util_1.createRule)({
                     return false;
             }
         }
-        function isInsideExportOrImport(node) {
+        function isInsideImport(node) {
             let current = node;
             while (true) {
                 switch (current.type) {
-                    case utils_1.AST_NODE_TYPES.ExportAllDeclaration:
-                    case utils_1.AST_NODE_TYPES.ExportNamedDeclaration:
                     case utils_1.AST_NODE_TYPES.ImportDeclaration:
                         return true;
                     case utils_1.AST_NODE_TYPES.ArrowFunctionExpression:
+                    case utils_1.AST_NODE_TYPES.ExportAllDeclaration:
+                    case utils_1.AST_NODE_TYPES.ExportNamedDeclaration:
                     case utils_1.AST_NODE_TYPES.BlockStatement:
                     case utils_1.AST_NODE_TYPES.ClassDeclaration:
                     case utils_1.AST_NODE_TYPES.TSInterfaceDeclaration:
                     case utils_1.AST_NODE_TYPES.FunctionDeclaration:
                     case utils_1.AST_NODE_TYPES.FunctionExpression:
                     case utils_1.AST_NODE_TYPES.Program:
+                    case utils_1.AST_NODE_TYPES.ExportSpecifier:
                     case utils_1.AST_NODE_TYPES.TSUnionType:
                     case utils_1.AST_NODE_TYPES.VariableDeclarator:
                         return false;
@@ -293,7 +301,7 @@ exports.default = (0, util_1.createRule)({
             return searchForDeprecationInAliasesChain(services.getSymbolAtLocation(node), true);
         }
         function checkIdentifier(node) {
-            if (isDeclaration(node) || isInsideExportOrImport(node)) {
+            if (isDeclaration(node) || isInsideImport(node)) {
                 return;
             }
             const reason = getDeprecationReason(node);
@@ -351,7 +359,26 @@ exports.default = (0, util_1.createRule)({
             }
         }
         return {
-            Identifier: checkIdentifier,
+            Identifier(node) {
+                const { parent } = node;
+                if (parent.type === utils_1.AST_NODE_TYPES.ExportNamedDeclaration ||
+                    parent.type === utils_1.AST_NODE_TYPES.ExportAllDeclaration) {
+                    return;
+                }
+                if (parent.type === utils_1.AST_NODE_TYPES.ExportSpecifier) {
+                    // only deal with the alias (exported) side, not the local binding
+                    if (parent.exported !== node) {
+                        return;
+                    }
+                    const symbol = services.getSymbolAtLocation(node);
+                    const aliasDeprecation = getJsDocDeprecation(symbol);
+                    if (aliasDeprecation != null) {
+                        return;
+                    }
+                }
+                // whether it's a plain identifier or the exported alias
+                checkIdentifier(node);
+            },
             JSXIdentifier(node) {
                 if (node.parent.type !== utils_1.AST_NODE_TYPES.JSXClosingElement) {
                     checkIdentifier(node);
