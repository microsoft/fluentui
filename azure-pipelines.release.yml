pr: none
trigger: none

# Customize build number to include major version
# Example: v8_20201022.1
name: 'v8_$(Date:yyyyMMdd)$(Rev:.r)'

variables:
  - group: 'Github and NPM secrets'
  - template: .devops/templates/variables.yml
    parameters:
      skipComponentGovernanceDetection: false

pool: 'Self Host Ubuntu'

schedules:
  # minute 0, hour 7 in UTC (11pm in UTC-8), any day of month, any month, days 1-5 of week (M-F)
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?tabs=yaml&view=azure-devops#supported-cron-syntax
  - cron: '0 7 * * 1-5'
    # will be 12am during daylight savings time unless trigger is updated
    displayName: 'Daily release (Sundary-Thursday at 11pm PST)'
    branches:
      include:
        - master

workspace:
  clean: all

steps:
  - template: .devops/templates/tools.yml

  - script: |
      git config user.name "Fluent UI Build"
      git config user.email "fluentui-internal@service.microsoft.com"
      git remote set-url origin https://$(githubUser):$(githubPAT)@github.com/microsoft/fluentui.git
    displayName: Authenticate git for pushes

  - task: Bash@3
    inputs:
      filePath: yarn-ci.sh
    displayName: yarn

  - script: |
      yarn generate-version-files
    displayName: Generate version files

  # The contents of this file is configured in the component governence tab of ADO
  # - task: msospo.ospo-extension.8d7f9abb-6896-461d-9e25-4f74ed65ddb2.notice@0
  #  displayName: 'Generate NOTICE file for convergence'

  # - task: DownloadBuildArtifacts@0
  #  displayName: 'Download NOTICE.txt'
  #  inputs:
  #    downloadType: specific
  #    itemPattern: '**/NOTICE.txt'

  # - task: CopyFiles@2
  #  displayName: 'Copy NOTICE to @fluentui/react-components'
  #  inputs:
  #    SourceFolder: '$(System.ArtifactsDirectory)'
  #    Contents: '**/NOTICE.txt'
  #    TargetFolder: '$(Build.SourcesDirectory)/packages/react-components'
  #    flattenFolders: true

  # - script: |
  #    yarn copy-notices
  #  displayName: Copy NOTICE to converged packages

  - script: |
      yarn run:published build --production --no-cache
    displayName: yarn build

  # test, lint, bundle using lage cached build from previous step (omit --no-cache)
  - script: |
      yarn run:published test
    displayName: yarn test

  - script: |
      yarn run:published lint
    displayName: yarn lint

  - script: |
      yarn run:published bundle --production
    displayName: yarn bundle

  - script: |
      npm run publish:beachball -- -b origin/master -n $(npmToken) --access public -y
      git reset --hard origin/master
    env:
      GITHUB_PAT: $(githubPAT)
    displayName: Publish changes and bump versions

  - script: |
      echo Making $(Build.ArtifactStagingDirectory)/api
      mkdir -p $(Build.ArtifactStagingDirectory)/api
      cp packages/*/dist/*.api.json $(Build.ArtifactStagingDirectory)/api
    displayName: Copy api.json files to artifact staging directory

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/api
      artifactName: 'api-json'
      publishLocation: 'Container'
    displayName: 'Publish artifact: api-json'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: apps/public-docsite/dist
      artifactName: 'fabric-website'
      publishLocation: 'Container'
    displayName: 'Publish artifact: fabric-website (public-docsite)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: packages/react/dist
      artifactName: 'fabric'
      publishLocation: 'Container'
    displayName: 'Publish artifact: fabric (packages/react/dist)'

  - script: |
      oufrVersion=$(node -p -e "require('./packages/react/package.json').version")
      echo "OUFR Version: $oufrVersion"
      echo $oufrVersion > oufr-version.txt
      echo "##vso[task.setvariable variable=oufrVersion;]$oufrVersion"
    displayName: 'Set oufrVersion variable'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: ./oufr-version.txt
      artifactName: 'oufr-version'
      publishLocation: 'Container'
    displayName: 'Publish artifact: oufr-version'

  # create-site-manifests is a script defined in @fluentui/public-docsite-setup.
  # It generates manifest files used to load the current version on developer.microsoft.com/fluentui.
  - script: |
      yarn create-site-manifests ./packages/react
    displayName: 'Generate website manifests'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: ./site-manifests
      artifactName: 'fabric-website-manifests'
      publishLocation: 'Container'
    displayName: 'Publish artifact: fabric-website-manifests'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: apps/public-docsite-resources/dist/demo
      artifactName: 'fabric-website-resources'
      publishLocation: 'Container'
    displayName: 'Publish artifact: fabric-website-resources (public-docsite-resources)'

  # Generate the homepage.htm file used to load developer.microsoft.com/fluentui. Note that the
  # generated file must be manually checked in to an internal repo, it's just generated as a build
  # artifact for convenience and tracking.
  - script: |
      node ./packages/public-docsite-setup/scripts/generateHomepage ./homepage
    displayName: 'Generate homepage.htm'

  - task: PublishBuildArtifacts@1
    inputs:
      # This includes the actual homepage.htm as well as a non-minified JS file for debugging
      pathtoPublish: ./homepage
      artifactName: 'homepage.htm'
      publishLocation: 'Container'
    displayName: 'Publish artifact: homepage.htm'

  - script: |
      node ./scripts/generate-package-manifest
    displayName: 'Generate package manifest'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: package-manifest
      artifactName: 'package-manifest'
      publishLocation: 'Container'
    displayName: 'Publish artifact: package-manifest'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: packages/fluentui/docs/src/public
      artifactName: 'demo-images'
      publishLocation: 'Container'
    displayName: 'Publish artifact: demo-images'

  # Run this near the end because it's more likely to fail than the artifact upload tasks, and its
  # failure doesn't need to block anything else
  - script: |
      node -r ./scripts/ts-node-register ./scripts/updateReleaseNotes/index.ts --token=$(githubPAT) --apply --debug
    displayName: 'Update github release notes'

  # This would usually be run automatically (via a pipeline decorator from an extension), but the
  # thorough cleanup step prevents it from working. So run it manually here.
  - task: ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      sourceScanPath: $(Agent.BuildDirectory)
    condition: succeeded()
    timeoutInMinutes: 5
    continueOnError: true

  - template: .devops/templates/cleanup.yml
    parameters:
      checkForChangedFiles: false
